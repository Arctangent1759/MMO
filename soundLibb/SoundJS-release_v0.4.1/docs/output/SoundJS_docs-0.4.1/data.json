{
    "project": {
        "version": "0.4.1",
        "name": "SoundJS",
        "description": "SoundJS API.",
        "url": "http://www.createjs.com/#!/SoundJS",
        "logo": "http://createjs.com/resources/SuiteIcons/SoundJS/docs-icon-SoundJS.png"
    },
    "files": {
        "..\\src\\easeljs\\events\\EventDispatcher.js": {
            "name": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\easeljs\\utils\\Log.js": {
            "name": "..\\src\\easeljs\\utils\\Log.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\FlashPlugin.js": {
            "name": "..\\src\\soundjs\\FlashPlugin.js",
            "modules": {},
            "classes": {
                "FlashPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\HTMLAudioPlugin.js": {
            "name": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "modules": {},
            "classes": {
                "HTMLAudioPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\Sound.js": {
            "name": "..\\src\\soundjs\\Sound.js",
            "modules": {
                "SoundJS": 1
            },
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\WebAudioPlugin.js": {
            "name": "..\\src\\soundjs\\WebAudioPlugin.js",
            "modules": {},
            "classes": {
                "WebAudioPlugin": 1,
                "SoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\version.js": {
            "name": "..\\src\\soundjs\\version.js",
            "modules": {},
            "classes": {
                "SoundJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\soundjs\\version_flashplugin.js": {
            "name": "..\\src\\soundjs\\version_flashplugin.js",
            "modules": {},
            "classes": {},
            "fors": {
                "FlashPlugin": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "SoundJS": {
            "name": "SoundJS",
            "submodules": {},
            "classes": {
                "EventDispatcher": 1,
                "Log": 1,
                "FlashPlugin": 1,
                "HTMLAudioPlugin": 1,
                "Sound": 1,
                "WebAudioPlugin": 1,
                "SoundInstance": 1,
                "SoundJS": 1
            },
            "fors": {
                "FlashPlugin": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "..\\src\\soundjs\\version.js",
            "line": 7,
            "description": "The SoundJS library manages the playback of audio on the web. It works via plugins which abstract the actual audio\nimplementation, so playback is possible on any platform without specific knowledge of what mechanisms are necessary\nto play sounds.\n\nTo use SoundJS, use the public API on the {{#crossLink \"Sound\"}}{{/crossLink}} class. This API is for:\n<ul><li>Installing audio playback Plugins</li>\n     <li>Registering (and preloading) sounds</li>\n     <li>Creating and playing sounds</li>\n     <li>Master volume, mute, and stop controls for all sounds at once</li>\n</ul>\n\n<b>Please note that as of version 0.4.0, the \"SoundJS\" object only provides version information. All APIs from\nSoundJS are now available on the {{#crossLink \"Sound\"}}{{/crossLink}} class.</b>\n\n<b>Controlling Sounds</b><br />\nPlaying sounds creates {{#crossLink \"SoundInstance\"}}{{/crossLink}} instances, which can be controlled individually.\n<ul><li>Pause, resume, seek, and stop sounds</li>\n     <li>Control a sound's volume, mute, and pan</li>\n     <li>Listen for events on sound instances to get notified when they finish, loop, or fail</li>\n</ul>\n\n<h4>Feature Set Example</h4>\n     createjs.Sound.addEventListener(\"fileload\", createjs.proxy(this.loadHandler, this));\n     createjs.Sound.registerSound(\"path/to/mySound.mp3|path/to/mySound.ogg\", \"sound\");\n     function loadHandler(event) {\n         // This is fired for each sound that is registered.\n         var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full sourcepath or event.src.\n         instance.addEventListener(\"complete\", createjs.proxy(this.handleComplete, this));\n         instance.setVolume(0.5);\n     }",
            "itemtype": "main"
        }
    },
    "classes": {
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Sound",
                "SoundInstance"
            ],
            "module": "SoundJS",
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 34,
            "description": "The EventDispatcher provides methods for managing prioritized queues of event listeners and dispatching events. All\n{{#crossLink \"DisplayObject\"}}{{/crossLink}} classes dispatch events, as well as some of the utilities like {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\nYou can either extend this class or mix its methods into an existing prototype or instance by using the\nEventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\n<h4>Example</h4>\nAdd EventDispatcher capabilities to the \"MyClass\" class.\n\n     EventDispatcher.initialize(MyClass.prototype);\n\nAdd an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\n     instance.addEventListener(\"eventName\", handlerMethod);\n     function handlerMethod(event) {\n         console.log(event.target + \" Was Clicked\");\n     }\n\n<b>Maintaining proper scope</b><br />\nWhen using EventDispatcher in a class, you may need to use <code>Function.bind</code> or another approach to\nmaintain you method scope. Note that Function.bind is not supported in some older browsers.\n\n     instance.addEventListener(\"click\", handleClick.bind(this));\n     function handleClick(event) {\n         console.log(\"Method called in scope: \" + this);\n     }\n\nPlease note that currently, EventDispatcher does not support event priority or bubbling. Future versions may add\nsupport for one or both of these features.",
            "is_constructor": 1
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 34,
            "description": "Log provides a centralized system for outputting errors. By default it will attempt to use console.log\nto output messages, but this can be changed by setting the out property.",
            "is_constructor": 1
        },
        "FlashPlugin": {
            "name": "FlashPlugin",
            "shortname": "FlashPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 39,
            "description": "Play sounds using a Flash instance. This plugin is not used by default, and must be registered manually in\n{{#crossLink \"Sound\"}}{{/crossLink}} using the {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method. This\nplugin is recommended to be included if sound support is required in older browsers such as IE8.\n\nThis plugin requires FlashAudioPlugin.swf and swfObject.js (which is compiled\ninto the minified FlashPlugin-X.X.X.min.js file. You must ensure that <code>FlashPlugin.BASE_PATH</code> is\nset when using this plugin, so that the script can find the swf.\n\n<h4>Example</h4>\n     createjs.FlashPlugin.BASE_PATH = \"../src/SoundJS/\";\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashPlugin]);\n     // Adds FlashPlugin as a fallback if WebAudio and HTMLAudio do not work.\n\nNote that the SWF is embedded into a container DIV (with an id and classname of \"SoundJSFlashContainer\"), and\nwill have an id of \"flashAudioContainer\". The container DIV is positioned 1 pixel off-screen to the left to avoid\nshowing the 1x1 pixel white square.\n\n<h4>Known Browser and OS issues for HTML Audio</h4>\n<b>All browsers</b><br />\n<ul><li> There can be a delay in flash player starting playback of audio.  This has been most noticeable in Firefox.\nUnfortunely this is an issue with the flash player and therefore cannot be addressed by SoundJS.</li></ul>",
            "is_constructor": 1
        },
        "HTMLAudioPlugin": {
            "name": "HTMLAudioPlugin",
            "shortname": "HTMLAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 39,
            "description": "Play sounds using HTML &lt;audio&gt; tags in the browser. This plugin is the second priority plugin installed\nby default, after the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, which is supported on Chrome, Safari, and\niOS. This handles audio in all other modern browsers. For older browsers that do not support html audio, include\nand install the {{#crossLink \"FlashPlugin\"}}{{/crossLink}}.\n\n<h4>Known Browser and OS issues for HTML Audio</h4>\n<b>All browsers</b><br />\nTesting has shown in all browsers there is a limit to how many audio tag instances you are allowed.  If you exceed\nthis limit, you can expect to see unpredictable results.  This will be seen as soon as you register sounds, as\ntags are precreated to all Chrome to load them.  Please use {{#crossLink \"Sound.MAX_INSTANCES\"}}{{/crossLink}} as\na guide to how many total audio tags you can safely use in all browsers.\n\n<b>IE 9 html limitations</b><br />\n<ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\nmuted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\nwhen or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n<li>MP3 encoding will not always work for audio tags if it's not default.  We've found default encoding with\n64kbps works.</li>\n<li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by\nhardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe estimate.</li></ul>\n\n<b>Safari limitations</b><br />\n<ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\n<b>iOS 6 limitations</b><br />\nNote it is recommended to use {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} for iOS (6+). HTML Audio is disabled by\ndefault as it can only have one &lt;audio&gt; tag, can not preload or autoplay the audio, can not cache the audio,\nand can not play the audio except inside a user initiated event.\n\n<b>Android HTML Audio limitations</b><br />\n<ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n     <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use a delay.</li>\n<b> Android Chrome 26.0.1410.58 specific limitations</b><br />\n\t\t<li>Chrome reports true when you run createjs.Sound.BrowserDetect.isChrome, but is a different browser\n     with different abilities.</li>\n     <li>Can only play 1 sound at a time.</li>\n     <li>Sound is not cached.</li>\n     <li>Sound can only be loaded in a user initiated touch/click event.</li>\n     <li>There is a delay before a sound is played, presumably while the src is loaded.</li>\n</ul>\n\nSee {{#crossLink \"Sound\"}}{{/crossLink}} for general notes on known issues.",
            "is_constructor": 1
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 77,
            "description": "The Sound class is the public API for creating sounds, controlling the overall sound levels, and managing plugins.\nAll Sound APIs on this class are static.\n\n<b>Registering and Preloading</b><br />\nBefore you can play a sound, it <b>must</b> be registered. You can do this with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}},\nor register multiple sounds using {{#crossLink \"Sound/registerManifest\"}}{{/crossLink}}. If you don't register a\nsound prior to attempting to play it using {{#crossLink \"Sound/play\"}}{{/crossLink}} or create it using {{#crossLink \"Sound/createInstance\"}}{{/crossLink}},\nthe sound source will be automatically registered but playback will fail as the source will not be ready. If you use\n<a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>, this is handled for you when the sound is\npreloaded. It is recommended to preload sounds either internally using the register functions or externally using\nPreloadJS so they are ready when you want to use them.\n\n<b>Playback</b><br />\nTo play a sound once it's been registered and preloaded, use the {{#crossLink \"Sound/play\"}}{{/crossLink}} method.\nThis method returns a {{#crossLink \"SoundInstance\"}}{{/crossLink}} which can be paused, resumed, muted, etc.\nPlease see the {{#crossLink \"SoundInstance\"}}{{/crossLink}} documentation for more on the instance control APIs.\n\n<b>Plugins</b><br />\nBy default, the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} or the {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}\nare used (when available), although developers can change plugin priority or add new plugins (such as the\nprovided {{#crossLink \"FlashPlugin\"}}{{/crossLink}}). Please see the {{#crossLink \"Sound\"}}{{/crossLink}} API\nmethods for more on the playback and plugin APIs. To install plugins, or specify a different plugin order, see\n{{#crossLink \"Sound/installPlugins\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.FlashPlugin]);\n     createjs.Sound.addEventListener(\"fileload\", createjs.proxy(this.loadHandler, (this));\n     createjs.Sound.registerSound(\"path/to/mySound.mp3|path/to/mySound.ogg\", \"sound\");\n     function loadHandler(event) {\n         // This is fired for each sound that is registered.\n         var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full source path or event.src.\n         instance.addEventListener(\"complete\", createjs.proxy(this.handleComplete, this));\n         instance.setVolume(0.5);\n     }\n\nThe maximum number of concurrently playing instances of the same sound can be specified in the \"data\" argument\nof {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}.  Note that if not specified, the active plugin will apply\na default limit.  Currently HTMLAudioPlugin sets a default limit of 2, while WebAudioPlugin and FlashPlugin set a\ndefault limit of 100.\n\n     createjs.Sound.registerSound(\"sound.mp3\", \"soundId\", 4);\n\nSound can be used as a plugin with PreloadJS to help preload audio properly. Audio preloaded with PreloadJS is\nautomatically registered with the Sound class. When audio is not preloaded, Sound will do an automatic internal\nload. As a result, it may not play immediately the first time play is called. Use the\n{{#crossLink \"Sound/fileload\"}}{{/crossLink}} event to determine when a sound has finished internally preloading.\nIt is recommended that all audio is preloaded before it is played.\n\n     createjs.PreloadJS.installPlugin(createjs.Sound);\n\n<b>Mobile Safe Approach</b><br />\nMobile devices require sounds to be played inside of a user initiated event (touch/click) in varying degrees.\nAs of SoundJS 0.4.1, you can launch a site inside of a user initiated event and have audio playback work. To\nenable as broadly as possible, the site needs to setup the Sound plugin in its initialization (for example via\n<code>createjs.Sound.initializeDefaultPlugins();</code>), and all sounds need to be played in the scope of the\napplication.  See the MobileSafe demo for a working example.\n\n<h4>Example</h4>\n    document.getElementById(\"status\").addEventListener(\"click\", handleTouch, false);    // works on Android and iPad\n    function handleTouch(event) {\n      document.getElementById(\"status\").removeEventListener(\"click\", handleTouch, false);    // remove the listener\n      var thisApp = new myNameSpace.MyApp();    // launch the app\n    }\n\n<h4>Known Browser and OS issues</h4>\n<b>IE 9 HTML Audio limitations</b><br />\n<ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\nmuted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\nwhen or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n<li>MP3 encoding will not always work for audio tags, particularly in Internet Explorer. We've found default\nencoding with 64kbps works.</li>\n<li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by\nhardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe estimate.</li></ul>\n\n<b>Safari limitations</b><br />\n<ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\n<b>iOS 6 Web Audio limitations</b><br />\n<ul><li>Sound is initially muted and will only unmute through play being called inside a user initiated event\n(touch/click).</li>\n<li>Despite suggestions to the opposite, we have control over audio volume through our gain nodes.</li>\n<li>A bug exists that will distort un-cached web audio when a video element is present in the DOM.</li>\n<li>Note HTMLAudioPlugin is not supported on iOS by default.  See {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}\nfor more details.<li>\n</ul>\n\n<b>Android HTML Audio limitations</b><br />\n<ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n<li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use\na delay.</li></ul>\n\n<b>Android Chrome 26.0.1410.58 specific limitations</b><br />\n<ul><li>Chrome reports true when you run createjs.Sound.BrowserDetect.isChrome, but is a different browser\nwith different abilities.</li>\n<li>Can only play 1 sound at a time.</li>\n<li>Sound is not cached.</li>\n<li>Sound can only be loaded in a user initiated touch/click event.</li>\n<li>There is a delay before a sound is played, presumably while the src is loaded.</li>\n</ul>",
            "static": 1,
            "uses": [
                "EventDispatcher"
            ]
        },
        "WebAudioPlugin": {
            "name": "WebAudioPlugin",
            "shortname": "WebAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 39,
            "description": "Play sounds using Web Audio in the browser. The WebAudio plugin has been successfully tested with:\n<ul><li>Google Chrome, version 23+ on OS X and Windows</li>\n     <li>Safari 6+ on OS X</li>\n     <li>Mobile Safari on iOS 6+</li>\n</ul>\n\nThe WebAudioPlugin is currently the default plugin, and will be used anywhere that it is supported. Currently\nChrome and Safari offer support.  Firefox and Android Chrome both offer support for web audio in upcoming\nreleases.  To change plugin priority, check out the Sound API {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method.\n\n<h4>Known Browser and OS issues for Web Audio Plugin</h4>\n<b>Webkit (Chrome and Safari)</b><br />\n<ul><li>AudioNode.disconnect does not always seem to work.  This can cause the file size to grow over time if you\nare playing a lot of audio files.</li>\n\n<b>iOS 6 limitations</b><br />\n<ul><li>Sound is initially muted and will only unmute through play being called inside a user initiated event (touch/click).</li>\n     <li>Despite suggestions to the opposite, we have relative control over audio volume through the gain nodes.</li>\n\t\t<li>A bug exists that will distort uncached audio when a video element is present in the DOM.</li>\n</ul>",
            "is_constructor": 1,
            "since": "0.4.0"
        },
        "SoundInstance": {
            "name": "SoundInstance",
            "shortname": "SoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 420,
            "description": "A SoundInstance is created when any calls to the Sound API method {{#crossLink \"Sound/play\"}}{{/crossLink}} or\n{{#crossLink \"Sound/createInstance\"}}{{/crossLink}} are made. The SoundInstance is returned by the active plugin\nfor control by the user.\n\n<h4>Example</h4>\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n\nA number of additional parameters provide a quick way to determine how a sound is played. Please see the Sound\nAPI method {{#crossLink \"Sound/play\"}}{{/crossLink}} for a list of arguments.\n\nOnce a SoundInstance is created, a reference can be stored that can be used to control the audio directly through\nthe SoundInstance. If the reference is not stored, the SoundInstance will play out its audio (and any loops), and\nis then de-referenced from the {{#crossLink \"Sound\"}}{{/crossLink}} class so that it can be cleaned up. If audio\nplayback has completed, a simple call to the {{#crossLink \"SoundInstance/play\"}}{{/crossLink}} instance method\nwill rebuild the references the Sound class need to control it.\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n     myInstance.addEventListener(\"complete\", playAgain);\n     function playAgain(event) {\n         myInstance.play();\n     }\n\nEvents are dispatched from the instance to notify when the sound has completed, looped, or when playback fails\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n     myInstance.addEventListener(\"complete\", handleComplete);\n     myInstance.addEventListener(\"loop\", handleLoop);\n     myInstance.addEventListener(\"failed\", handleFailed);",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The plugin instance that created this SoundInstance.",
                    "type": "Object"
                }
            ],
            "uses": [
                "EventDispatcher"
            ],
            "is_constructor": 1
        },
        "SoundJS": {
            "name": "SoundJS",
            "shortname": "SoundJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "..\\src\\soundjs\\version.js",
            "line": 7,
            "description": "Static class holding library specific information such as the version and buildDate of the library.\nThe SoundJS class has been renamed {{#crossLink \"Sound\"}}{{/crossLink}}.  Please see {{#crossLink \"Sound\"}}{{/crossLink}}\nfor information on using sound."
        }
    },
    "classitems": [
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 74,
            "description": "Static initializer to mix in EventDispatcher methods.",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object to inject EventDispatcher methods into. This can be an instance or a\nprototype.",
                    "type": "Object"
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 90,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Object",
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 98,
            "description": "Initialization method.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 106,
            "description": "Adds the specified event listener. Note that adding multiple listeners to the same function will result in\nmultiple callbacks getting fired.\n\n<h4>Example</h4>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n        // Click happened.\n     }",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment.",
                "type": "Function | Object"
            },
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 133,
            "description": "Removes the specified event listener.\n\n<b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\nfunction, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\nclosure will not work.\n\n<h4>Example</h4>\n\n     displayObject.removeEventListener(\"click\", handleClick);",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 162,
            "description": "Removes all listeners for the specified type, or all listeners of all types.\n\n<h4>Example</h4>\n\n     // Remove all listeners\n     displayObject.removeAllEvenListeners();\n\n     // Remove all click listeners\n     displayObject.removeAllEventListeners(\"click\");",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 181,
            "description": "Dispatches the specified event to all listeners.\n\n<h4>Example</h4>\n\n     // Use a string event\n     this.dispatchEvent(\"complete\");\n\n     // Use an object\n     var event = {\n         type: \"complete\",\n         foo: \"bar\"\n     };\n     this.dispatchEvent(event);",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "An object with a \"type\" property, or a string type. If a string is used,\ndispatchEvent will construct a generic event object with the specified type.",
                    "type": "Object | String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object. This will default to the\ndispatching object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true.",
                "type": "Boolean"
            },
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 220,
            "description": "Indicates whether there is at least one listener for the specified event type.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\events\\EventDispatcher.js",
            "line": 231,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "EventDispatcher"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 42,
            "description": "Read-only. Output no messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "NONE",
            "default": "0",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 51,
            "description": "Read-only. Error messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "ERROR",
            "default": "1",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 60,
            "description": "Read-only. Warning messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "WARNING",
            "default": "2",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 69,
            "description": "Read-only. Trace messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "TRACE",
            "default": "3",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 78,
            "description": "Read-only. Output all messages.",
            "type": "Number",
            "itemtype": "property",
            "name": "ALL",
            "default": "255",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 87,
            "description": "Defines the function that will be used to handle any logged messages. By default it will use console.log. The\nspecified function will be passed the same three parameters as Log.log, but the message will\nbe expanded if a matching key was found.<br/><br/>\nFor example, you could use this to log any messages to a server, or output it to a TextArea. You can disable all\nlogging by setting this to null.<br/><br/>\nAll messages are passed to the out function regardless of level settings, and the function must handle the level\nappropriately. This is to allow, for example, functions that log all messages to a server, but only display\nmessages under the current level in the UI.",
            "type": "Function",
            "itemtype": "property",
            "name": "out",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 107,
            "description": "Specifies the level of messages to output. For example, if you set <code>Log.level = Log.WARNING</code>, then any \nmessages with a level of 2 (Log.WARNING) or less (ex. Log.ERROR) will be output. Defaults to Log.ALL.",
            "type": "Function",
            "itemtype": "property",
            "name": "out",
            "default": "255",
            "static": 1,
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 117,
            "itemtype": "property",
            "name": "_keys",
            "static": 1,
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 125,
            "description": "Adds a definition object that associates one or more keys with longer messages. \nThese messages can optionally include \"%DETAILS%\" which will be replaced by any details passed\nwith the error. For example:<br/>\nLog.addKeys( {MY_ERROR:\"This is a description of my error [%DETAILS%]\"} );\nLog.error( \"MY_ERROR\" , 5 ); // outputs \"This is a description of my error [5]\"",
            "params": [
                {
                    "name": "keys",
                    "description": "The generic object defining the keys and messages.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "itemtype": "method",
            "name": "addKeys",
            "class": "Log"
        },
        {
            "file": "..\\src\\easeljs\\utils\\Log.js",
            "line": 139,
            "description": "Outputs the specified error via the method assigned to the \"out\" property. If the error matches a key in any of the\nloaded def objects, it will substitute that message.",
            "params": [
                {
                    "name": "message",
                    "description": "The error message or key to output.",
                    "type": "String"
                },
                {
                    "name": "details",
                    "description": "Any details associated with this message.",
                    "type": "String"
                },
                {
                    "name": "level",
                    "description": "A number between 1 and 254 specifying the severity of this message. See Log.level for details.",
                    "type": "Number"
                }
            ],
            "static": 1,
            "itemtype": "method",
            "name": "error",
            "class": "Log"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 71,
            "description": "The capabilities of the plugin. This is generated via the {{#crossLink \"WebAudioPlugin/generateCapabilities\"}}{{/crossLink}}\nmethod. Please see the Sound {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}} method for a list of available\ncapabilities.",
            "itemtype": "property",
            "name": "capabilities",
            "type": "{Object}",
            "static": 1,
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 81,
            "description": "The path relative to the HTML page that the FlashAudioPlugin.swf resides. Note if this is not correct, this\nplugin will not work.",
            "itemtype": "property",
            "name": "BASE_PATH",
            "type": "{String}",
            "default": "src/SoundJS",
            "static": 1,
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 91,
            "description": "Determine if the plugin can be used in the current browser/OS.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 109,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "generateCapabiities",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 141,
            "description": "An object hash indexed by ID that indicates if each source is loaded or loading.",
            "itemtype": "property",
            "name": "audioSources",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 149,
            "description": "The internal volume value of the plugin.",
            "itemtype": "property",
            "name": "volume",
            "type": "{Number}",
            "default": "1",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 158,
            "description": "The id name of the DIV that gets created for Flash content.",
            "itemtype": "property",
            "name": "CONTAINER_ID",
            "type": "{String}",
            "default": "flashAudioContainer",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 167,
            "description": "The id name of the DIV wrapper that contains the Flash content.",
            "itemtype": "property",
            "name": "WRAPPER_ID",
            "type": "{String}",
            "default": "SoundJSFlashContainer",
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 181,
            "description": "A reference to the DIV container that gets created to hold the Flash instance.",
            "itemtype": "property",
            "name": "container",
            "type": "{HTMLDivElement}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 189,
            "description": "A reference to the Flash instance that gets created.",
            "itemtype": "property",
            "name": "flash",
            "type": "{Object | Embed}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 197,
            "description": "Determines if the Flash object has been created and initialized. This is required to make <code>ExternalInterface</code>\ncalls from JavaScript to Flash.",
            "itemtype": "property",
            "name": "flashReady",
            "type": "{Boolean}",
            "default": "false",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 206,
            "description": "A hash of SoundInstances indexed by the related ID in Flash. This lookup is required to connect sounds in\nJavaScript to their respective instances in Flash.",
            "itemtype": "property",
            "name": "flashInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 215,
            "description": "A hash of Sound Preload instances indexed by the related ID in Flash. This lookup is required to connect\na preloading sound in Flash with its respective instance in JavaScript.",
            "itemtype": "property",
            "name": "flashPreloadInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 224,
            "description": "A hash of Sound Preload instances indexed by the src. This lookup is required to load sounds if internal\npreloading is tried when flash is not ready.",
            "itemtype": "property",
            "name": "preloadInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 234,
            "description": "An array of Sound Preload instances that are waiting to preload. Once Flash is initialized, the queued\ninstances are preloaded.",
            "itemtype": "property",
            "name": "queuedInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 243,
            "description": "A developer flag to output all flash events to the console (if it exists).  Used for debugging.\n\n     createjs.Sound.activePlugin.showOutput = true;",
            "itemtype": "property",
            "name": "showOutput",
            "type": "{Boolean}",
            "default": "false",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 254,
            "description": "An initialization function run by the constructor",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 291,
            "description": "The SWF used for sound preloading and playback has been initialized.",
            "itemtype": "method",
            "name": "handleSWFReady",
            "params": [
                {
                    "name": "event",
                    "description": "Contains a reference to the swf.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 302,
            "description": "The Flash application that handles preloading and playback is ready. We wait for a callback from Flash to\nensure that everything is in place before playback begins.",
            "itemtype": "method",
            "name": "handleFlashReady",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 334,
            "description": "The callback when Flash does not initialize. This usually means the SWF is missing or incorrectly pathed.",
            "itemtype": "method",
            "name": "handleTimeout",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 343,
            "description": "Pre-register a sound instance when preloading/setup. Note that the FlashPlugin will return a SoundLoader\ninstance for preloading since Flash can not access the browser cache consistently.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the audio",
                    "type": "String"
                },
                {
                    "name": "instances",
                    "description": "The number of concurrently playing instances to allow for the channel at any time.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A result object, containing a tag for preloading purposes.",
                "type": "Object"
            },
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 366,
            "description": "Remove a sound added using {{#crossLink \"FlashPlugin/register\"}}{{/crossLink}}. Note this does not cancel a\npreload.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 382,
            "description": "Remove all sounds added using {{#crossLink \"FlashPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeAllSounds",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 399,
            "description": "Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "src",
                    "description": "The sound source to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A sound instance for playback and control.",
                "type": "SoundInstance"
            },
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 419,
            "description": "Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,\nor has already finished loading.",
            "itemtype": "method",
            "name": "isPreloadStarted",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 430,
            "description": "Preload a sound instance. This plugin uses Flash to preload and play all sounds.",
            "itemtype": "method",
            "name": "preload",
            "params": [
                {
                    "name": "src",
                    "description": "The path to the Sound",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "Not used in this plugin.",
                    "type": "Object"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 442,
            "description": "Set the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "The volume to set, between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the plugin processes the setVolume call (true). The Sound class will affect all the\ninstances manually otherwise.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 455,
            "description": "Internal function used to set the gain value for master audio.  Should not be called externally.",
            "itemtype": "method",
            "name": "updateVolume",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 467,
            "description": "Get the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The volume level, between 0 and 1."
            },
            "since": "0.4.0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 477,
            "description": "Mute all sounds via the plugin.",
            "itemtype": "method",
            "name": "setMute",
            "params": [
                {
                    "name": "value",
                    "description": "If all sound should be muted or not. Note that plugin-level muting just looks up\nthe mute value of Sound {{#crossLink \"Sound/getMute\"}}{{/crossLink}}, so this property is not used here.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute call succeeds.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 490,
            "description": "Used to couple a Flash loader instance with a <code>SoundLoader</code> instance",
            "itemtype": "method",
            "name": "registerPreloadInstance",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the SoundLoader.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "The actual instance.",
                    "type": "SoundLoader"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 500,
            "description": "Used to decouple a <code>SoundLoader</code> instance from Flash.",
            "itemtype": "method",
            "name": "unregisterPreloadInstance",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the SoundLoader.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 509,
            "description": "Used to couple a Flash sound instance with a {{#crossLink \"SoundInstance\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "registerSoundInstance",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the SoundInstance.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "The actual instance.",
                    "type": "SoundLoader"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 519,
            "description": "Used to decouple a {{#crossLink \"SoundInstance\"}}{{/crossLink}} from Flash.\ninstance.",
            "itemtype": "method",
            "name": "unregisterSoundInstance",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the SoundInstance.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "The actual instance.",
                    "type": "SoundLoader"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 530,
            "description": "Used to output traces from Flash to the console, if {{#crossLink \"FlashPlugin/showOutput\"}}{{/crossLink}} is\n<code>true</code>.",
            "itemtype": "method",
            "name": "flashLog",
            "params": [
                {
                    "name": "data",
                    "description": "The information to be output.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 543,
            "description": "Handles events from Flash, and routes communication to a {{#crossLink \"SoundInstance\"}}{{/crossLink}} via\nthe Flash ID. The method and arguments from Flash are run directly on the sound instance.",
            "itemtype": "method",
            "name": "handleSoundEvent",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the SoundInstance.",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "Indicates the method to run.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 569,
            "description": "Handles events from Flash and routes communication to a <code>SoundLoader</code> via the Flash ID. The method\nand arguments from Flash are run directly on the sound loader.",
            "itemtype": "method",
            "name": "handlePreloadEvent",
            "params": [
                {
                    "name": "flashId",
                    "description": "Used to identify the loader instance.",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "Indicates the method to run.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 595,
            "description": "Handles events from Flash intended for the FlashPlugin class. Currently only a \"ready\" event is processed.",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "method",
                    "description": "Indicates the method to run.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 610,
            "description": "Handles error events from Flash. Note this function currently does not process any events.",
            "itemtype": "method",
            "name": "handleErrorEvent",
            "params": [
                {
                    "name": "error",
                    "description": "Indicates the error.",
                    "type": "String"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 839,
            "description": "Called from Flash.  Lets us know flash has finished playing a sound.\n#method handleSoundFinished",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 853,
            "description": "Called from Flash.  Lets us know that flash has played a sound to completion and is looping it.\n#method handleSoundLoop",
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 877,
            "description": "SoundLoader provides a mechanism to preload Flash content via PreloadJS or internally. Instances are returned to\nthe preloader, and the load method is called when the asset needs to be requested.\n\nSoundLoader has the same APIs as an &lt;audio&gt; tag. The instance calls the <code>onload</code>, <code>onprogress</code>,\nand <code>onerror</code> callbacks when necessary.\n\n#class SoundLoader",
            "params": [
                {
                    "name": "src",
                    "description": "The path to the sound",
                    "type": "String"
                },
                {
                    "name": "flash",
                    "description": "The flash instance that will do the preloading.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 895,
            "description": "A reference to the Flash instance that gets created.\n#property flash",
            "type": "{Object | Embed}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 902,
            "description": "The source file to be loaded.\n#property src",
            "type": "{String}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 909,
            "description": "ID used to facilitate communication with flash.\n#property flashId",
            "type": "{String}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 916,
            "description": "The percentage of progress.\n#property progress",
            "type": "{Number}",
            "default": "-1",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 924,
            "description": "Used to report if audio is ready.  Value of 4 indicates ready.\n#property readyState",
            "type": "{Number}",
            "default": "0",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 932,
            "description": "Indicates if <code>load</code> has been called on this.\n#property loading",
            "type": "{Boolean}",
            "default": "false",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 940,
            "description": "Plugin that created this.  This will be an instance of <code>FlashPlugin</code>.\n#property owner",
            "type": "{Object}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 948,
            "description": "The callback that fires when the load completes. This follows HTML tag name conventions.\n#property onload",
            "type": "{Method}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 955,
            "description": "The callback that fires as the load progresses. This follows HTML tag name conventions.\n#property onprogress",
            "type": "{Method}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 962,
            "description": "The callback that fires if the load hits an error. This follows HTML tag name conventions.\n#property onerror",
            "type": "{Method}",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 976,
            "description": "Called when Flash has been initialized. If a load call was made before this, call it now.\n#method initialize",
            "params": [
                {
                    "name": "flash",
                    "description": "A reference to the Flash instance.",
                    "type": "Object | Embed"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 989,
            "description": "Start loading.\n#method load",
            "params": [
                {
                    "name": "src",
                    "description": "The path to the sound.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the load was started. If Flash has not been initialized, the load will fail.",
                "type": "Boolean"
            },
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 1012,
            "description": "Receive progress from Flash and pass it to callback.\n#method handleProgress",
            "params": [
                {
                    "name": "loaded",
                    "description": "Amount loaded",
                    "type": "Number"
                },
                {
                    "name": "total",
                    "description": "Total amount to be loaded.",
                    "type": "Number"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 1023,
            "description": "Called from Flash when sound is loaded.  Set our ready state and fire callbacks / events\n#method handleComplete",
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\FlashPlugin.js",
            "line": 1034,
            "description": "Receive error event from flash and pass it to callback.",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 92,
            "description": "The maximum number of instances that can be loaded and played. This is a browser limitation, primarily limited to IE9.\nThe actual number varies from browser to browser (and is largely hardware dependant), but this is a safe estimate.",
            "itemtype": "property",
            "name": "MAX_INSTANCES",
            "type": "{Number}",
            "default": "30",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 102,
            "description": "The capabilities of the plugin. This is generated via the the SoundInstance {{#crossLink \"TMLAudioPlugin/generateCapabilities\"}}{{/crossLink}}\nmethod. Please see the Sound {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}} method for an overview of all\nof the available properties.",
            "itemtype": "property",
            "name": "capabilities",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 113,
            "description": "Event constant for the \"canPlayThrough\" event for cleaner code.",
            "itemtype": "property",
            "name": "AUDIO_READY",
            "type": "{String}",
            "default": "canplaythrough",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 122,
            "description": "Event constant for the \"ended\" event for cleaner code.",
            "itemtype": "property",
            "name": "AUDIO_ENDED",
            "type": "{String}",
            "default": "ended",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 131,
            "description": "Event constant for the \"seeked\" event for cleaner code.  We utilize this event for maintaining loop events.",
            "itemtype": "property",
            "name": "AUDIO_SEEKED",
            "type": "{String}",
            "default": "seeked",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 140,
            "description": "Event constant for the \"error\" event for cleaner code.",
            "itemtype": "property",
            "name": "AUDIO_ERROR",
            "type": "{String}",
            "default": "error",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 149,
            "description": "Event constant for the \"stalled\" event for cleaner code.",
            "itemtype": "property",
            "name": "AUDIO_STALLED",
            "type": "{String}",
            "default": "stalled",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 159,
            "description": "Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern\nbrowsers, but is disabled in iOS because of its limitations.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 181,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "generateCapabiities",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 218,
            "description": "Object hash indexed by the source of each file to indicate if an audio source is loaded, or loading.",
            "itemtype": "property",
            "name": "audioSources",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 227,
            "description": "The default number of instances to allow.  Passed back to {{#crossLink \"Sound\"}}{{/crossLink}} when a source\nis registered using the {{#crossLink \"Sound/register\"}}{{/crossLink}} method.  This is only used if\na value is not provided.\n\n<b>NOTE this property only exists as a limitation of HTML audio.</b>",
            "itemtype": "property",
            "name": "defaultNumChannels",
            "type": "{Number}",
            "default": "2",
            "since": "0.4.0",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 240,
            "description": "An initialization function run by the constructor",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 250,
            "description": "Pre-register a sound instance when preloading/setup. This is called by {{#crossLink \"Sound\"}}{{/crossLink}}.\nNote that this provides an object containing a tag used for preloading purposes, which\n<a href=\"http://preloadjs.com\">PreloadJS</a> can use to assist with preloading.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the audio",
                    "type": "String"
                },
                {
                    "name": "instances",
                    "description": "The number of concurrently playing instances to allow for the channel at any time.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A result object, containing a tag for preloading purposes and a numChannels value for internally\ncontrolling how many instances of a source can be played by default.",
                "type": "Object"
            },
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 275,
            "description": "Create an HTML audio tag.",
            "itemtype": "method",
            "name": "createTag",
            "params": [
                {
                    "name": "src",
                    "description": "The source file to set for the audio tag.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an HTML audio tag.",
                "type": "HTMLElement"
            },
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 291,
            "description": "Remove a sound added using {{#crossLink \"HTMLAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel\na preload.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 303,
            "description": "Remove all sounds added using {{#crossLink \"HTMLAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeAllSounds",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 314,
            "description": "Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "src",
                    "description": "The sound source to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A sound instance for playback and control.",
                "type": "SoundInstance"
            },
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 332,
            "description": "Checks if preloading has started for a specific source.",
            "itemtype": "method",
            "name": "isPreloadStarted",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the preload has started.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 343,
            "description": "Internally preload a sound.",
            "itemtype": "method",
            "name": "preload",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to load.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "An object containing a tag property that is an HTML audio tag used to load src.",
                    "type": "Object"
                }
            ],
            "since": "0.4.0",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 717,
            "description": "An internal helper class that preloads html audio via HTMLAudioElement tags. Note that PreloadJS will NOT use\nthis load class like it does Flash and WebAudio plugins.\nNote that this class and its methods are not documented properly to avoid generating HTML documentation.\n#class HTMLAudioLoader",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the sound to load.",
                    "type": "String"
                },
                {
                    "name": "tag",
                    "description": "The audio tag of the sound to load.",
                    "type": "HTMLAudioElement"
                }
            ],
            "is_constructor": 1,
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 734,
            "description": "The source to be loaded.\n#property src",
            "type": "{String}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 743,
            "description": "The tag to load the source with / into.\n#property tag",
            "type": "{AudioTag}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 752,
            "description": "An interval used to give us progress.\n#property preloadTimer",
            "type": "{String}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 785,
            "description": "Allows us to have preloading progress and tell when its done.\n#method preloadTick",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 801,
            "description": "Internal handler for when a tag is loaded.\n#method handleTagLoaded",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 810,
            "description": "Communicates back to Sound that a load is complete.\n#method sendLoadedEvent",
            "params": [
                {
                    "name": "evt",
                    "description": "The load Event",
                    "type": "Object"
                }
            ],
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 830,
            "description": "The TagPool is an object pool for HTMLAudio tag instances. In Chrome, we have to pre-create the number of HTML\naudio tag instances that we are going to play before we load the data, otherwise the audio stalls.\n(Note: This seems to be a bug in Chrome)\n#class TagPool",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the channel.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 842,
            "description": "A hash lookup of each sound channel, indexed by the audio source.\n#property tags",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 850,
            "description": "Get a tag pool. If the pool doesn't exist, create it.\n#method get",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                }
            ],
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 865,
            "description": "Delete a TagPool and all related tags. Note that if the TagPool does not exist, this will fail.\n#method remove",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the TagPool was deleted.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 882,
            "description": "Delete all TagPools and all related tags.\n#method removeAll",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 894,
            "description": "Get a tag instance. This is a shortcut method.\n#method getInstance",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                }
            ],
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 909,
            "description": "Return a tag instance. This is a shortcut method.\n#method setInstance",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                },
                {
                    "name": "tag",
                    "description": "Audio tag to set.",
                    "type": "HTMLElement"
                }
            ],
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 927,
            "description": "The source of the tag pool.\n#property src",
            "type": "{String}",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 935,
            "description": "The total number of HTMLAudio tags in this pool. This is the maximum number of instance of a certain sound\nthat can play at one time.\n#property length",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 945,
            "description": "The number of unused HTMLAudio tags.\n#property available",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 954,
            "description": "A list of all available tags in the pool.\n#property tags",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 968,
            "description": "Add an HTMLAudio tag into the pool.\n#method add",
            "params": [
                {
                    "name": "tag",
                    "description": "A tag to be used for playback.",
                    "type": "HTMLAudioElement"
                }
            ],
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 979,
            "description": "Remove all tags from the channel.  Usually in response to a delete call.\n#method removeAll",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 992,
            "description": "Get an HTMLAudioElement for immediate playback. This takes it out of the pool.\n#method get",
            "return": {
                "description": "An HTML audio tag.",
                "type": "HTMLAudioElement"
            },
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\HTMLAudioPlugin.js",
            "line": 1009,
            "description": "Put an HTMLAudioElement back in the pool for use.\n#method set",
            "params": [
                {
                    "name": "tag",
                    "description": "HTML audio tag",
                    "type": "HTMLAudioElement"
                }
            ],
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 188,
            "description": "The character (or characters) that are used to split multiple paths from an audio source.",
            "itemtype": "property",
            "name": "DELIMITER",
            "type": "{String}",
            "default": "|",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 197,
            "description": "The duration in milliseconds to determine a timeout.",
            "itemtype": "property",
            "name": "AUDIO_TIMEOUT",
            "static": 1,
            "type": "{Number}",
            "default": "8000",
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 207,
            "description": "The interrupt value to interrupt any currently playing instance with the same source, if the maximum number of\ninstances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_ANY",
            "type": "{String}",
            "default": "any",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 217,
            "description": "The interrupt value to interrupt the earliest currently playing instance with the same source that progressed the\nleast distance in the audio track, if the maximum number of instances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_EARLY",
            "type": "{String}",
            "default": "early",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 227,
            "description": "The interrupt value to interrupt the currently playing instance with the same source that progressed the most\ndistance in the audio track, if the maximum number of instances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_LATE",
            "type": "{String}",
            "default": "late",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 237,
            "description": "The interrupt value to not interrupt any currently playing instances with the same source, if the maximum number of\ninstances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_NONE",
            "type": "{String}",
            "default": "none",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 248,
            "description": "Defines the playState of an instance that is still initializing.",
            "itemtype": "property",
            "name": "PLAY_INITED",
            "type": "{String}",
            "default": "playInited",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 257,
            "description": "Defines the playState of an instance that is currently playing or paused.",
            "itemtype": "property",
            "name": "PLAY_SUCCEEDED",
            "type": "{String}",
            "default": "playSucceeded",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 266,
            "description": "Defines the playState of an instance that was interrupted by another instance.",
            "itemtype": "property",
            "name": "PLAY_INTERRUPTED",
            "type": "{String}",
            "default": "playInterrupted",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 275,
            "description": "Defines the playState of an instance that completed playback.",
            "itemtype": "property",
            "name": "PLAY_FINISHED",
            "type": "{String}",
            "default": "playFinished",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 284,
            "description": "Defines the playState of an instance that failed to play. This is usually caused by a lack of available channels\nwhen the interrupt mode was \"INTERRUPT_NONE\", the playback stalled, or the sound could not be found.",
            "itemtype": "property",
            "name": "PLAY_FAILED",
            "type": "{String}",
            "default": "playFailed",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 294,
            "description": "A list of the default supported extensions that Sound will <i>try</i> to play. Plugins will check if the browser\ncan play these types, so modifying this list before a plugin is initialized will allow the plugins to try to\nsupport additional media types.\n\nNOTE this does not currently work for {{#crossLink \"FlashPlugin\"}}{{/crossLink}}.\n\nMore details on file formats can be found at http://en.wikipedia.org/wiki/Audio_file_format. A very detailed\nlist of file formats can be found at http://www.fileinfo.com/filetypes/audio. A useful list of extensions for\neach format can be found at http://html5doctor.com/html5-audio-the-state-of-play/",
            "itemtype": "property",
            "name": "SUPPORTED_EXTENSIONS",
            "type": "{Array[String]}",
            "default": "[\"mp3\", \"ogg\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"]",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 310,
            "description": "Some extensions use another type of extension support to play (one of them is a codex).  This allows you to map\nthat support so plugins can accurately determine if an extension is supported.  Adding to this list can help\nplugins determine more accurately if an extension is supported.",
            "itemtype": "property",
            "name": "EXTENSION_MAP",
            "type": "{Object}",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 322,
            "description": "The RegExp pattern used to parse file URIs. This supports simple file names, as well as full domain URIs with\nquery strings. The resulting match is: protocol:$1 domain:$2 path:$3 file:$4 extension:$5 query:$6.",
            "itemtype": "property",
            "name": "FILE_PATTERN",
            "type": "{RegExp}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 332,
            "description": "Determines the default behavior for interrupting other currently playing instances with the same source, if the\nmaximum number of instances of the sound are already playing.  Currently the default is <code>Sound.INTERRUPT_NONE</code>\nbut this can be set and will change playback behavior accordingly.  This is only used when {{#crossLink \"Sound/play\"}}{{/crossLink}}\nis called without passing a value for interrupt.",
            "itemtype": "property",
            "name": "defaultInterruptBehavior",
            "type": "{String}",
            "default": "none",
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 345,
            "description": "Used internally to assign unique IDs to each SoundInstance.",
            "itemtype": "property",
            "name": "lastID",
            "type": "{Number}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 354,
            "description": "The currently active plugin. If this is null, then no plugin could be initialized. If no plugin was specified,\nSound attempts to apply the default plugins: {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by\n{{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "activePlugin",
            "type": "{Object}",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 364,
            "description": "Determines if the plugins have been registered. If false, the first call to play() will instantiate the default\nplugins ({{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}).\nIf plugins have been registered, but none are applicable, then sound playback will fail.",
            "itemtype": "property",
            "name": "pluginsRegistered",
            "type": "{Boolean}",
            "default": "false",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 376,
            "description": "The master volume value, which affects all sounds. Use {{#crossLink \"Sound/getVolume\"}}{{/crossLink}} and\n{{#crossLink \"Sound/setVolume\"}}{{/crossLink}} to modify the volume of all audio.",
            "itemtype": "property",
            "name": "masterVolume",
            "type": "{Number}",
            "default": "1",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 387,
            "description": "The master mute value, which affects all sounds.  This is applies to all sound instances.  This value can be set\nthrough {{#crossLink \"Sound/setMute\"}}{{/crossLink}} and accessed via {{#crossLink \"Sound/getMute\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "masterMute",
            "type": "{Boolean}",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 399,
            "description": "An array containing all currently playing instances. This allows Sound to control the volume, mute, and playback of\nall instances when using static APIs like {{#crossLink \"Sound/stop\"}}{{/crossLink}} and {{#crossLink \"Sound/setVolume\"}}{{/crossLink}}.\nWhen an instance has finished playback, it gets removed via the {{#crossLink \"Sound/finishedPlaying\"}}{{/crossLink}}\nmethod. If the user replays an instance, it gets added back in via the {{#crossLink \"Sound/beginPlaying\"}}{{/crossLink}}\nmethod.",
            "itemtype": "property",
            "name": "instances",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 412,
            "description": "An object hash storing sound sources via there corresponding ID.",
            "itemtype": "property",
            "name": "idHash",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 421,
            "description": "An object hash that stores preloading sound sources via the parsed source that is passed to the plugin.  Contains the\nsource, id, and data that was passed in by the user.  Parsed sources can contain multiple instances of source, id,\nand data.",
            "itemtype": "property",
            "name": "preloadHash",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 432,
            "description": "An object that stands in for audio that fails to play. This allows developers to continue to call methods\non the failed instance without having to check if it is valid first. The instance is instantiated once, and\nshared to keep the memory footprint down.",
            "itemtype": "property",
            "name": "defaultSoundInstance",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 456,
            "description": "This event is fired when a file finishes loading internally. <b>Please use the \"fileload\" event instead.</b>",
            "itemtype": "event",
            "name": "loadComplete",
            "deprecated": true,
            "deprecationMessage": "In favor of the \"fileload\" event.",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 463,
            "description": "This event is fired when a file finishes loading internally. This event is fired for each loaded sound,\nso any handler methods should look up the <code>event.src</code> to handle a particular sound.",
            "itemtype": "event",
            "name": "fileload",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The source of the sound that was loaded. Note this will only return the loaded part of a\ndelimiter-separated source.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The id passed in when the sound was registered. If one was not provided, it will be null.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Any additional data associated with the item. If not provided, it will be undefined.",
                    "type": "Number|Object",
                    "optional": true
                }
            ],
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 477,
            "description": "The callback that is fired when a file finishes loading internally.  This is fired for each loaded sound.",
            "itemtype": "property",
            "name": "onLoadComplete",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"fileload\" event. Will be removed in a future version.",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 486,
            "description": "Used by external plugins to dispatch file load events.",
            "itemtype": "method",
            "name": "sendFileLoadEvent",
            "params": [
                {
                    "name": "src",
                    "description": "A sound file has completed loading, and should be dispatched.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 523,
            "description": "Get the preload rules to allow Sound to be used as a plugin by <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\nAny load calls that have the matching type or extension will fire the callback method, and use the resulting\nobject, which is potentially modified by Sound. This helps when determining the correct path, as well as\nregistering the audio instance(s) with Sound. This method should not be called, except by PreloadJS.",
            "itemtype": "method",
            "name": "getPreloadHandlers",
            "return": {
                "description": "An object containing:\n<ul><li>callback: A preload callback that is fired when a file is added to PreloadJS, which provides\n     Sound a mechanism to modify the load parameters, select the correct file format, register the sound, etc.</li>\n     <li>types: A list of file types that are supported by Sound (currently supports \"sound\").</li>\n     <li>extensions: A list of file extensions that are supported by Sound (see {{#crossLink \"Sound.SUPPORTED_EXTENSIONS\"}}{{/crossLink}}).</li></ul>",
                "type": "Object"
            },
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 545,
            "description": "Register a Sound plugin. Plugins handle the actual playback of audio. The default plugins are\n({{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}),\nand are installed if no other plugins are present when the user attempts to start playback or register sound.\n<h4>Example</h4>\n     createjs.FlashPlugin.BASE_PATH = \"../src/SoundJS/\";\n     createjs.Sound.registerPlugin(createjs.FlashPlugin);\n\nTo register multiple plugins, use {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "registerPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin class to install.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the plugin was successfully initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 574,
            "description": "Register a list of Sound plugins, in order of precedence. To register a single plugin, use\n{{#crossLink \"Sound/registerPlugin\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n     createjs.FlashPlugin.BASE_PATH = \"../src/SoundJS/\";\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashPlugin]);",
            "itemtype": "method",
            "name": "registerPlugins",
            "params": [
                {
                    "name": "plugins",
                    "description": "An array of plugins classes to install.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether a plugin was successfully initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 597,
            "description": "Initialize the default plugins. This method is automatically called when any audio is played or registered before\nthe user has manually registered plugins, and enables Sound to work without manual plugin setup. Currently, the\ndefault plugins are {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n\n * <h4>Example</h4>\n     if (!createjs.initializeDefaultPlugins()) { return; }",
            "itemtype": "method",
            "name": "initializeDefaultPlugins",
            "return": {
                "description": "If a plugin is initialized (true) or not (false). If the browser does not have the\ncapabilities to initialize any available plugins, this will return false.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 623,
            "description": "Determines if Sound has been initialized, and a plugin has been activated.\n\n<h4>Example</h4>\nThis example sets up a Flash fallback, but only if there is no plugin specified yet.\n\n     if (!createjs.Sound.isReady()) {\n\t\t\tcreatejs.FlashPlugin.BASE_PATH = \"../src/SoundJS/\";\n     \tcreatejs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashPlugin]);\n     }",
            "itemtype": "method",
            "name": "isReady",
            "return": {
                "description": "If Sound has initialized a plugin.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 642,
            "description": "Get the active plugins capabilities, which help determine if a plugin can be used in the current environment,\nor if the plugin supports a specific feature. Capabilities include:\n<ul>\n    <li><b>panning:</b> If the plugin can pan audio from left to right</li>\n    <li><b>volume;</b> If the plugin can control audio volume.</li>\n    <li><b>mp3:</b> If MP3 audio is supported.</li>\n    <li><b>ogg:</b> If OGG audio is supported.</li>\n    <li><b>wav:</b> If WAV audio is supported.</li>\n    <li><b>mpeg:</b> If MPEG audio is supported.</li>\n    <li><b>m4a:</b> If M4A audio is supported.</li>\n    <li><b>mp4:</b> If MP4 audio is supported.</li>\n    <li><b>aiff:</b> If aiff audio is supported.</li>\n    <li><b>wma:</b> If wma audio is supported.</li>\n    <li><b>mid:</b> If mid audio is supported.</li>\n    <li><b>tracks:</b> The maximum number of audio tracks that can be played back at a time. This will be -1\n    if there is no known limit.</li>",
            "itemtype": "method",
            "name": "getCapabilities",
            "return": {
                "description": "An object containing the capabilities of the active plugin.",
                "type": "Object"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 670,
            "description": "Get a specific capability of the active plugin. See {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}} for a\nfull list of capabilities.\n\n<h4>Example</h4>\n     var maxAudioInstances = createjs.Sound.getCapability(\"tracks\");",
            "itemtype": "method",
            "name": "getCapability",
            "params": [
                {
                    "name": "key",
                    "description": "The capability to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the capability.",
                "type": "Number|Boolean"
            },
            "static": 1,
            "see": [
                "getCapabilities"
            ],
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 690,
            "description": "Process manifest items from <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>. This method is intended\nfor usage by a plugin, and not for direct interaction.",
            "itemtype": "method",
            "name": "initLoad",
            "params": [
                {
                    "name": "src",
                    "description": "The src or object to load. This is usually a string path, but can also be an\nHTMLAudioElement or similar audio playback object.",
                    "type": "String | Object"
                },
                {
                    "name": "type",
                    "description": "The type of object. Will likely be \"sound\" or null.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "An optional user-specified id that is used to play sounds.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Data associated with the item. Sound uses the data parameter as the\nnumber of channels for an audio instance, however a \"channels\" property can be appended to the data object if\nthis property is used for other information. The audio channels will default to 1 if no value is found.",
                    "type": "Number|String|Boolean|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An object with the modified values of those that were passed in, or false if the active\nplugin can not play the audio type.",
                "type": "Boolean|Object"
            },
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 714,
            "description": "Register an audio file for loading and future playback in Sound. This is automatically called when using\n<a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.  It is recommended to register all sounds that\nneed to be played back in order to properly prepare and preload them. Sound does internal preloading when required.\n\n<h4>Example</h4>\n     createjs.Sound.addEventListener(\"fileload\", handleLoad); // add an event listener for when load is completed\n     createjs.Sound.registerSound(\"myAudioPath/mySound.mp3|myAudioPath/mySound.ogg\", \"myID\", 3);",
            "itemtype": "method",
            "name": "registerSound",
            "params": [
                {
                    "name": "src",
                    "description": "The source or an Objects with a \"src\" property",
                    "type": "String | Object"
                },
                {
                    "name": "id",
                    "description": "An id specified by the user to play the sound later.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Data associated with the item. Sound uses the data parameter as the number of\nchannels for an audio instance, however a \"channels\" property can be appended to the data object if it is used\nfor other information. The audio channels will set a default based on plugin if no value is found.",
                    "type": "Number | Object",
                    "optional": true
                },
                {
                    "name": "preload",
                    "description": "If the sound should be internally preloaded so that it can be played back\nwithout an external preloader.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with the modified values that were passed in, which defines the sound. Returns false\nif the source cannot be parsed.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 809,
            "description": "Register a manifest of audio files for loading and future playback in Sound. It is recommended to register all\nsounds that need to be played back in order to properly prepare and preload them. Sound does internal preloading\nwhen required.\n\n<h4>Example</h4>\n     var manifest = [\n         {src:\"assetPath/asset0.mp3|assetPath/asset0.ogg\", id:\"example\"}, // Note the Sound.DELIMITER\n         {src:\"assetPath/asset1.mp3|assetPath/asset1.ogg\", id:\"1\", data:6},\n         {src:\"assetPath/asset2.mp3\", id:\"works\"}\n     ];\n     createjs.Sound.addEventListener(\"fileload\", handleLoad); // call handleLoad when each sound loads\n     createjs.Sound.registerManifest(manifest);",
            "itemtype": "method",
            "name": "registerManifest",
            "params": [
                {
                    "name": "manifest",
                    "description": "An array of objects to load. Objects are expected to be in the format needed for\n{{#crossLink \"Sound/registerSound\"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data, preload:UseInternalPreloader}</code>\nwith \"id\", \"data\", and \"preload\" being optional.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of objects with the modified values that were passed in, which defines each sound. It\nwill return false for any values that the source cannot be parsed.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 840,
            "description": "Remove a sound that has been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerManifest\"}}{{/crossLink}}.\nNote this will stop playback on active instances playing this sound before deleting them.\n\n<h4>Example</h4>\n     createjs.Sound.removeSound(\"myAudioPath/mySound.mp3|myAudioPath/mySound.ogg\");\n     createjs.Sound.removeSound(\"myID\");",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio, or an Object with a \"src\" property",
                    "type": "String | Object"
                }
            ],
            "return": {
                "description": "True if sound is successfully removed.",
                "type": "Boolean"
            },
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 889,
            "description": "Remove a manifest of audio files that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerManifest\"}}{{/crossLink}}.\nNote this will stop playback on active instances playing this audio before deleting them.\n\n<h4>Example</h4>\n     var manifest = [\n         {src:\"assetPath/asset0.mp3|assetPath/asset0.ogg\", id:\"example\"}, // Note the Sound.DELIMITER\n         {src:\"assetPath/asset1.mp3|assetPath/asset1.ogg\", id:\"1\", data:6},\n         {src:\"assetPath/asset2.mp3\", id:\"works\"}\n     ];\n     createjs.Sound.removeManifest(manifest);",
            "itemtype": "method",
            "name": "removeManifest",
            "params": [
                {
                    "name": "manifest",
                    "description": "An array of objects to remove. Objects are expected to be in the format needed for\n{{#crossLink \"Sound/removeSound\"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of Boolean values representing if the sounds with the same array index in manifest was\nsuccessfully removed.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 918,
            "description": "Remove all sounds that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerManifest\"}}{{/crossLink}}.\nNote this will stop playback on all active sound instances before deleting them.\n\n<h4>Example</h4>\n    createjs.Sound.removeAllSounds();",
            "itemtype": "method",
            "name": "removeAllSounds",
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 937,
            "description": "Check if a source has been loaded by internal preloaders. This is necessary to ensure that sounds that are\nnot completed preloading will not kick off a new internal preload if they are played.\n\n<h4>Example</h4>\n    var mySound = \"assetPath/asset0.mp3|assetPath/asset0.ogg\";\n    if(createjs.Sound.loadComplete(mySound) {\n    \tcreatejs.Sound.play(mySound);\n    }",
            "itemtype": "method",
            "name": "loadComplete",
            "params": [
                {
                    "name": "src",
                    "description": "The src or id that is being loaded.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the src is already loaded.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 962,
            "description": "Parse the path of a sound, usually from a manifest item. Manifest items support single file paths, as well as\ncomposite paths using <code>Sound.DELIMITER</code>, which defaults to \"|\". The first path supported by the\ncurrent browser/plugin will be used.",
            "itemtype": "method",
            "name": "parsePath",
            "params": [
                {
                    "name": "value",
                    "description": "The path to an audio source.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of path. This will typically be \"sound\" or null.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "The user-specified sound ID. This may be null, in which case the src will be used instead.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Arbitrary data appended to the sound, usually denoting the\nnumber of channels for the sound. This method doesn't currently do anything with the data property.",
                    "type": "Number | String | Boolean | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formatted object that can be registered with the <code>Sound.activePlugin</code> and returned\nto a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1005,
            "description": "Play a sound and get a {{#crossLink \"SoundInstance\"}}{{/crossLink}} to control. If the sound fails to play, a\nSoundInstance will still be returned, and have a playState of <code>Sound.PLAY_FAILED</code>. Note that even on\nsounds with failed playback, you may still be able to call SoundInstance {{#crossLink \"SoundInstance/play\"}}{{/crossLink}},\nsince the failure could be due to lack of available channels. If the src does not have a supported extension or\nif there is no available plugin,<code>Sound.defaultSoundInstance</code> will be returned, which will not play any\naudio, but will not generate errors.\n\n<h4>Example</h4>\n     createjs.Sound.addEventListener(\"fileload\", handleLoad);\n     createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n     function handleLoad(event) {\n     \tcreatejs.Sound.play(\"myID\");\n     \t// alternately we could call the following\n     \tvar myInstance = createjs.Sound.play(\"myAudioPath/mySound.mp3\", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, 1, 0);\n     }",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio.",
                    "type": "String"
                },
                {
                    "name": "interrupt",
                    "description": "How to interrupt any currently playing instances of audio with the same source,\nif the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\nconstants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior\"}}{{/crossLink}}.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"none\""
                },
                {
                    "name": "delay",
                    "description": "The amount of time to delay the start of audio playback, in milliseconds.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "The offset from the start of the audio to begin playback, in milliseconds.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "loop",
                    "description": "How many times the audio loops when it reaches the end of playback. The default is 0 (no\nloops), and -1 can be used for infinite playback.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "volume",
                    "description": "The volume of the sound, between 0 and 1. Note that the master volume is applied\nagainst the individual volume.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "pan",
                    "description": "The left-right pan of the sound (if supported), between -1 (left) and 1 (right).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"SoundInstance\"}}{{/crossLink}} that can be controlled after it is created.",
                "type": "SoundInstance"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1047,
            "description": "Creates a {{#crossLink \"SoundInstance\"}}{{/crossLink}} using the passed in src. If the src does not have a\nsupported extension or if there is no available plugin, a <code>Sound.defaultSoundInstance</code> will be returned\nthat can be called safely but does nothing.\n\n<h4>Example</h4>\n     var myInstance = null;\n     createjs.Sound.addEventListener(\"fileload\", handleLoad);\n     createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n     function handleLoad(event) {\n     \tmyInstance = createjs.Sound.createInstance(\"myID\");\n     \t// alternately we could call the following\n     \tmyInstance = createjs.Sound.createInstance(\"myAudioPath/mySound.mp3\");\n     }",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"SoundInstance\"}}{{/crossLink}} that can be controlled after it is created.\nUnsupported extensions will return the default SoundInstance.",
                "type": "SoundInstance"
            },
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1093,
            "description": "Set the master volume of Sound. The master volume is multiplied against each sound's individual volume.  For\nexample, if master volume is 0.5 and a sound's volume is 0.5, the resulting volume is 0.25. To set individual\nsound volume, use SoundInstance {{#crossLink \"SoundInstance/setVolume\"}}{{/crossLink}} instead.\n\n<h4>Example</h4>\n    createjs.Sound.setVolume(0.5);",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "The master volume value. The acceptable range is 0-1.",
                    "type": "Number"
                }
            ],
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1119,
            "description": "Get the master volume of Sound. The master volume is multiplied against each sound's individual volume.\nTo get individual sound volume, use SoundInstance {{#crossLink \"SoundInstance/getVolume\"}}{{/crossLink}} instead.\n\n<h4>Example</h4>\n    var masterVolume = createjs.Sound.getVolume();",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The master volume, in a range of 0-1.",
                "type": "Number"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1134,
            "description": "Mute/Unmute all audio. Please see {{#crossLink \"Sound/setMute\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "mute",
            "params": [
                {
                    "name": "value",
                    "description": "Whether the audio should be muted or not.",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "This function has been deprecated. Please use setMute instead.",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1151,
            "description": "Mute/Unmute all audio. Note that muted audio still plays at 0 volume. This global mute value is maintained\nseparately and when set will override, but not change the mute property of individual instances. To mute an individual\ninstance, use SoundInstance {{#crossLink \"SoundInstance/setMute\"}}{{/crossLink}} instead.\n\n<h4>Example</h4>\n    createjs.Sound.setMute(true);",
            "itemtype": "method",
            "name": "setMute",
            "params": [
                {
                    "name": "value",
                    "description": "Whether the audio should be muted or not.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute was set.",
                "type": "Boolean"
            },
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1180,
            "description": "Returns the global mute value. To get the mute value of an individual instance, use SoundInstance\n{{#crossLink \"SoundInstance/getMute\"}}{{/crossLink}} instead.\n\n<h4>Example</h4>\n    var masterMute = createjs.Sound.getMute();",
            "itemtype": "method",
            "name": "getMute",
            "return": {
                "description": "The mute value of Sound.",
                "type": "Boolean"
            },
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1196,
            "description": "Stop all audio (global stop). Stopped audio is reset, and not paused. To play audio that has been stopped,\ncall {{#crossLink \"SoundInstance.play\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n    createjs.Sound.stop();",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1217,
            "description": "Play an instance. This is called by the static API, as well as from plugins. This allows the core class to\ncontrol delays.",
            "itemtype": "method",
            "name": "playInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "The {{#crossLink \"SoundInstance\"}}{{/crossLink}} to start playing.",
                    "type": "SoundInstance"
                },
                {
                    "name": "interrupt",
                    "description": "How this sound interrupts other instances with the same source.  Defaults to\n<code>Sound.INTERRUPT_NONE</code>. All interrupt values are defined as <code>INTERRUPT_TYPE</code>constants on Sound.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "none"
                },
                {
                    "name": "delay",
                    "description": "Time in milliseconds before playback begins.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "Time into the sound to begin playback in milliseconds.  Defaults to the\ncurrent value on the instance.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "instance.offset"
                },
                {
                    "name": "loop",
                    "description": "The number of times to loop the audio. Use 0 for no loops, and -1 for an infinite loop.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "volume",
                    "description": "The volume of the sound between 0 and 1. Defaults to current instance value.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "pan",
                    "description": "The pan of the sound between -1 and 1. Defaults to current instance value.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the sound can start playing. Sounds that fail immediately will return false. Sounds that\nhave a delay will return true, but may still fail to play.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1272,
            "description": "Begin playback. This is called immediately or after delay by {{#crossLink \"Sound/playInstance\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "beginPlaying",
            "params": [
                {
                    "name": "instance",
                    "description": "A {{#crossLink \"SoundInstance\"}}{{/crossLink}} to begin playback.",
                    "type": "SoundInstance"
                },
                {
                    "name": "interrupt",
                    "description": "How this sound interrupts other instances with the same source. Defaults to\n<code>Sound.INTERRUPT_NONE</code>. Interrupts are defined as <code>INTERRUPT_TYPE</code> constants on Sound.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "none"
                },
                {
                    "name": "offset",
                    "description": "Time in milliseconds into the sound to begin playback.  Defaults to the current value on\nthe instance.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "The number of times to loop the audio. Use 0 for no loops, and -1 for an infinite loop.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "volume",
                    "description": "The volume of the sound between 0 and 1. Defaults to the current value on the instance.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "pan",
                    "description": "The pan of the sound between -1 and 1. Defaults to current instance value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "instance.pan"
                }
            ],
            "return": {
                "description": "If the sound can start playing. If there are no available channels, or the instance fails to\nstart, this will return false.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1304,
            "description": "Get the source of a sound via the ID passed in with a register call. If no ID is found the value is returned\ninstead.",
            "itemtype": "method",
            "name": "getSrcById",
            "params": [
                {
                    "name": "value",
                    "description": "The ID the sound was registered with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The source of the sound.  Returns null if src has been registered with this id.",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1320,
            "description": "A sound has completed playback, been interrupted, failed, or been stopped. This method removes the instance from\nSound management. It will be added again, if the sound re-plays. Note that this method is called from the\ninstances themselves.",
            "itemtype": "method",
            "name": "playFinished",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance that finished playback.",
                    "type": "SoundInstance"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1337,
            "description": "A function proxy for Sound methods. By default, JavaScript methods do not maintain scope, so passing a\nmethod as a callback will result in the method getting called in the scope of the caller. Using a proxy\nensures that the method gets called in the correct scope.",
            "itemtype": "method",
            "name": "proxy",
            "params": [
                {
                    "name": "method",
                    "description": "The function to call",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to call the method name on",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "Deprecated in favor of createjs.proxy.",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1356,
            "description": "A function proxy for Sound methods. By default, JavaScript methods do not maintain scope, so passing a\nmethod as a callback will result in the method getting called in the scope of the caller. Using a proxy\nensures that the method gets called in the correct scope.\nNote arguments can be passed that will be applied to the function when it is called.\n\n<h4>Example<h4>\n    myObject.myCallback = createjs.proxy(myHandler, this, arg1, arg2);\n\n#method proxy",
            "params": [
                {
                    "name": "method",
                    "description": "The function to call",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to call the method name on",
                    "type": "Object"
                },
                {
                    "name": "arg",
                    "description": "* Arguments that are appended to the callback for additional params.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1380,
            "description": "An internal class that manages the number of active {{#crossLink \"SoundInstance\"}}{{/crossLink}} instances for\neach sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n\nThe number of sounds is artificially limited by Sound in order to prevent over-saturation of a\nsingle sound, as well as to stay within hardware limitations, although the latter may disappear with better\nbrowser support.\n\nWhen a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\nsound that is already playing.\n#class SoundChannel",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the instances",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The number of instances allowed",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "is_constructor": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1403,
            "description": "A hash of channel instances indexed by source.\n#property channels",
            "type": "{Object}",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1411,
            "description": "Create a sound channel. Note that if the sound channel already exists, this will fail.\n#method create",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the channel",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The maximum amount this channel holds. The default is {{#crossLink \"SoundChannel.maxDefault\"}}{{/crossLink}}.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the channels were created.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1427,
            "description": "Delete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n#method remove",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the channel",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the channels were deleted.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1443,
            "description": "Delete all sound channels, stop and delete all related instances.\n#method removeAll",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1454,
            "description": "Add an instance to a sound channel.\n#method add",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to add to the channel",
                    "type": "SoundInstance"
                },
                {
                    "name": "interrupt",
                    "description": "The interrupt value to use. Please see the {{#crossLink \"Sound/play\"}}{{/crossLink}}\nfor details on interrupt modes.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The success of the method call. If the channel is full, it will return false.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1470,
            "description": "Remove an instance from the channel.\n#method remove",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to remove from the channel",
                    "type": "SoundInstance"
                }
            ],
            "return": {
                "description": "The success of the method call. If there is no channel, it will return false."
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1485,
            "description": "Get the maximum number of sounds you can have in a channel.\n#method maxPerChannel",
            "return": {
                "description": "The maximum number of sounds you can have in a channel.",
                "type": "Number"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1493,
            "description": "Get a channel instance by its src.\n#method get",
            "params": [
                {
                    "name": "src",
                    "description": "The src to use to look up the channel",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1505,
            "description": "The source of the channel.\n#property src",
            "type": "{String}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1512,
            "description": "The maximum number of instances in this channel.  -1 indicates no limit\n#property max",
            "type": "{Number}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1519,
            "description": "The default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n#property maxDefault",
            "type": "{Number}",
            "default": "100",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1528,
            "description": "The current number of active instances.\n#property length",
            "type": "{Number}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1535,
            "description": "Initialize the channel.\n#method init",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the channel",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The maximum number of instances in the channel",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1551,
            "description": "Get an instance by index.\n#method get",
            "params": [
                {
                    "name": "index",
                    "description": "The index to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The SoundInstance at a specific instance.",
                "type": "SoundInstance"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1561,
            "description": "Add a new instance to the channel.\n#method add",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to add.",
                    "type": "SoundInstance"
                }
            ],
            "return": {
                "description": "The success of the method call. If the channel is full, it will return false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1576,
            "description": "Remove an instance from the channel, either when it has finished playing, or it has been interrupted.\n#method remove",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to remove",
                    "type": "SoundInstance"
                }
            ],
            "return": {
                "description": "The success of the remove call. If the instance is not found in this channel, it will\nreturn false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1593,
            "description": "Stop playback and remove all instances from the channel.  Usually in response to a delete call.\n#method removeAll",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1604,
            "description": "Get an available slot depending on interrupt value and if slots are available.\n#method getSlot",
            "params": [
                {
                    "name": "interrupt",
                    "description": "The interrupt value to use.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "The sound instance that will go in the channel if successful.",
                    "type": "SoundInstance"
                }
            ],
            "return": {
                "description": "Determines if there is an available slot. Depending on the interrupt mode, if there are no slots,\nan existing SoundInstance may be interrupted. If there are no slots, this method returns false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\Sound.js",
            "line": 1680,
            "description": "An additional module to determine the current browser, version, operating system, and other environment\nvariables. It is not publically documented.\n#class BrowserDetect",
            "params": [
                {
                    "name": "isFirefox",
                    "description": "True if our browser is Firefox.",
                    "type": "Boolean"
                },
                {
                    "name": "isOpera",
                    "description": "True if our browser is opera.",
                    "type": "Boolean"
                },
                {
                    "name": "isChrome",
                    "description": "True if our browser is Chrome.  Note that Chrome for Android returns true, but is a\ncompletely different browser with different abilities.",
                    "type": "Boolean"
                },
                {
                    "name": "isIOS",
                    "description": "True if our browser is safari for iOS devices (iPad, iPhone, and iPad).",
                    "type": "Boolean"
                },
                {
                    "name": "isAndroid",
                    "description": "True if our browser is Android.",
                    "type": "Boolean"
                },
                {
                    "name": "isBlackberry",
                    "description": "True if our browser is Blackberry.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1,
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 70,
            "description": "The capabilities of the plugin. This is generated via the <code>\"WebAudioPlugin/generateCapabilities</code>\nmethod and is used internally.",
            "itemtype": "property",
            "name": "capabilities",
            "type": "{Object}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 81,
            "description": "Determine if the plugin can be used in the current browser/OS.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 98,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/getCapabilities\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "generateCapabiities",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 158,
            "description": "Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\nrequire the first sound to be played inside of a user initiated event (touch/click).  This is called when\n{{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} is initialized (by {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}\nfor example).\n\n<h4>Example</h4>\n\n    function handleTouch(event) {\n        createjs.WebAudioPlugin.playEmptySound();\n    }",
            "itemtype": "method",
            "name": "playEmptySound",
            "since": "0.4.1",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 191,
            "description": "The internal volume value of the plugin.",
            "itemtype": "property",
            "name": "volume",
            "type": "{Number}",
            "default": "1",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 200,
            "description": "The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\nneed to be created within this context.",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 208,
            "description": "A DynamicsCompressorNode, which is used to improve sound quality and prevent audio distortion according to\nhttp://www.w3.org/TR/webaudio/#DynamicsCompressorNode. It is connected to <code>context.destination</code>.",
            "itemtype": "property",
            "name": "dynamicsCompressorNode",
            "type": "{AudioNode}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 216,
            "description": "A GainNode for controlling master volume. It is connected to <code>dynamicsCompressorNode</code>.",
            "itemtype": "property",
            "name": "gainNode",
            "type": "{AudioGainNode}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 223,
            "description": "An object hash used internally to store ArrayBuffers, indexed by the source URI used  to load it. This\nprevents having to load and decode audio files more than once. If a load has been started on a file,\n<code>arrayBuffers[src]</code> will be set to true. Once load is complete, it is set the the loaded\nArrayBuffer instance.",
            "itemtype": "property",
            "name": "arrayBuffers",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 234,
            "description": "An initialization function run by the constructor",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 248,
            "description": "Pre-register a sound for preloading and setup. This is called by {{#crossLink \"Sound\"}}{{/crossLink}}.\nNote that WebAudio provides a <code>WebAudioLoader</code> instance, which <a href=\"http://preloadjs.com\">PreloadJS</a>\ncan use to assist with preloading.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the audio",
                    "type": "String"
                },
                {
                    "name": "instances",
                    "description": "The number of concurrently playing instances to allow for the channel at any time.\nNote that the WebAudioPlugin does not manage this property.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A result object, containing a \"tag\" for preloading purposes.",
                "type": "Object"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 266,
            "description": "Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,\nor has already finished loading.",
            "itemtype": "method",
            "name": "isPreloadStarted",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 277,
            "description": "Checks if preloading has finished for a specific source.",
            "itemtype": "method",
            "name": "isPreloadComplete",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to load.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 287,
            "description": "Remove a source from our preload list. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeFromPreload",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "deprecated": true,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 297,
            "description": "Remove a sound added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 307,
            "description": "Remove all sounds added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeAllSounds",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "since": "0.4.1",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 317,
            "description": "Add loaded results to the preload object hash.",
            "itemtype": "method",
            "name": "addPreloadResults",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 327,
            "description": "Handles internal preload completion.",
            "itemtype": "method",
            "name": "handlePreloadComplete",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 338,
            "description": "Internally preload a sound. Loading uses XHR2 to load an array buffer for use with WebAudio.",
            "itemtype": "method",
            "name": "preload",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to load.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "Not used in this plugin.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 352,
            "description": "Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "src",
                    "description": "The sound source to use.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A sound instance for playback and control.",
                "type": "SoundInstance"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 365,
            "description": "Set the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "The volume to set, between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the plugin processes the setVolume call (true). The Sound class will affect all the\ninstances manually otherwise.",
                "type": "Boolean"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 378,
            "description": "Set the gain value for master audio. Should not be called externally.",
            "itemtype": "method",
            "name": "updateVolume",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 390,
            "description": "Get the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The volume level, between 0 and 1."
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 399,
            "description": "Mute all sounds via the plugin.",
            "itemtype": "method",
            "name": "setMute",
            "params": [
                {
                    "name": "value",
                    "description": "If all sound should be muted or not. Note that plugin-level muting just looks up\nthe mute value of Sound {{#crossLink \"Sound/getMute\"}}{{/crossLink}}, so this property is not used here.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute call succeeds.",
                "type": "Boolean"
            },
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 464,
            "description": "The source of the sound.",
            "itemtype": "property",
            "name": "src",
            "type": "{String}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 473,
            "description": "The unique ID of the instance. This is set by <code>Sound</code>.",
            "itemtype": "property",
            "name": "uniqueId",
            "type": "{String} | Number",
            "default": "-1",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 481,
            "description": "The play state of the sound. Play states are defined as constants on <code>Sound</code>.",
            "itemtype": "property",
            "name": "playState",
            "type": "{String}",
            "default": "null",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 489,
            "description": "The plugin that created the instance",
            "itemtype": "property",
            "name": "owner",
            "type": "{WebAudioPlugin}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 498,
            "description": "How far into the sound to begin playback in milliseconds. This is passed in when play is called and used by\npause and setPosition to track where the sound should be at.\nNote this is converted from milliseconds to seconds for consistency with the WebAudio API.",
            "itemtype": "property",
            "name": "offset",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 509,
            "description": "The time in milliseconds before the sound starts.\nNote this is handled by <code>Sound</code>.",
            "itemtype": "property",
            "name": "delay",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 520,
            "description": "The volume of the sound, between 0 and 1.\nUse <code>getVolume</code> and <code>setVolume</code> to access.",
            "itemtype": "property",
            "name": "volume",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 530,
            "description": "The pan of the sound, between -1 (left) and 1 (right). Note that pan does not work for HTML Audio.\nUse <code>getPan</code> and <code>setPan</code> to access.",
            "itemtype": "property",
            "name": "pan",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 541,
            "description": "The length of the audio clip, in milliseconds.\nUse <code>getDuration</code> to access.",
            "itemtype": "property",
            "name": "pan",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 551,
            "description": "The number of play loops remaining. Negative values will loop infinitely.",
            "itemtype": "property",
            "name": "remainingLoops",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 560,
            "description": "A Timout created by <code>Sound</code> when this SoundInstance is played with a delay. This allows SoundInstance\nto remove the delay if stop or pause or cleanup are called before playback begins.",
            "itemtype": "property",
            "name": "delayTimeoutId",
            "type": "{timeoutVariable}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 571,
            "description": "Timeout that is created internally to handle sound playing to completion. Stored so we can remove it when\nstop, pause, or cleanup are called",
            "itemtype": "property",
            "name": "soundCompleteTimeout",
            "type": "{timeoutVariable}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 582,
            "description": "NOTE this only exists as a <code>WebAudioPlugin</code> property and is only intended for use by advanced users.\nA panNode allowing left and right audio channel panning only. Connected to our <code>WebAudioPlugin.gainNode</code>\nthat sequences to <code>context.destination</code>.",
            "itemtype": "property",
            "name": "panNode",
            "type": "{AudioPannerNode}",
            "default": "null",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 593,
            "description": "NOTE this only exists as a <code>WebAudioPlugin</code> property and is only intended for use by advanced users.\nGainNode for controlling <code>SoundInstance</code> volume. Connected to <code>panNode</code>.",
            "itemtype": "property",
            "name": "gainNode",
            "type": "{AudioGainNode}",
            "default": "null",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 604,
            "description": "NOTE this only exists as a <code>WebAudioPlugin</code> property and is only intended for use by advanced users.\nsourceNode is the audio source. Connected to <code>gainNode</code>.",
            "itemtype": "property",
            "name": "sourceNode",
            "type": "{AudioSourceNode}",
            "default": "null",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 615,
            "description": "NOTE this only exists as a <code>WebAudioPlugin</code> property and is only intended for use by advanced users.\nsourceNodeNext is the audio source for the next loop, inserted in a look ahead approach to allow for smooth\nlooping. Connected to <code>gainNode</code>.",
            "itemtype": "property",
            "name": "sourceNodeNext",
            "type": "{AudioSourceNode}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 628,
            "description": "Determines if the audio is currently muted.\nUse <code>getMute</code> and <code>setMute</code> to access.",
            "itemtype": "property",
            "name": "muted",
            "type": "{Boolean}",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 638,
            "description": "Determines if the audio is currently paused.\nUse <code>pause()</code> and <code>resume()</code> to set.",
            "itemtype": "property",
            "name": "paused",
            "type": "{Boolean}",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 648,
            "description": "WebAudioPlugin only.\nTime audio started playback, in seconds. Used to handle set position, get position, and resuming from paused.",
            "itemtype": "property",
            "name": "startTime",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 674,
            "description": "The event that is fired when a sound is ready to play.",
            "itemtype": "event",
            "name": "ready",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 682,
            "description": "The event that is fired when playback has started successfully.",
            "itemtype": "event",
            "name": "succeeded",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 690,
            "description": "The event that is fired when playback is interrupted. This happens when another sound with the same\nsrc property is played using an interrupt value that causes this instance to stop playing.",
            "itemtype": "event",
            "name": "interrupted",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 699,
            "description": "The event that is fired when playback has failed. This happens when there are too many channels with the same\nsrc property already playing (and the interrupt value doesn't cause an interrupt of another instance), or\nthe sound could not be played, perhaps due to a 404 error.",
            "itemtype": "event",
            "name": "failed",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 709,
            "description": "The event that is fired when a sound has completed playing but has loops remaining.",
            "itemtype": "event",
            "name": "loop",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 717,
            "description": "The event that is fired when playback completes. This means that the sound has finished playing in its\nentirety, including its loop iterations.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 727,
            "description": "The callback that is fired when a sound is ready to play.",
            "itemtype": "property",
            "name": "onReady",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favor of the \"ready\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 735,
            "description": "The callback that is fired when playback has started successfully.",
            "itemtype": "property",
            "name": "onPlaySucceeded",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favour of the \"succeeded\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 743,
            "description": "The callback that is fired when a sound has been interrupted.",
            "itemtype": "property",
            "name": "onPlayInterrupted",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "Deprecated in favor of the \"interrupted\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 751,
            "description": "The callback that is fired when a sound has failed to start.",
            "itemtype": "property",
            "name": "onPlayFailed",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favor of the \"failed\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 759,
            "description": "The callback that is fired when a sound has completed playback.",
            "itemtype": "property",
            "name": "onComplete",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favor of the \"complete\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 767,
            "description": "The callback that is fired when a sound has completed playback, but has loops remaining.",
            "itemtype": "property",
            "name": "onLoop",
            "type": "{Function}",
            "deprecated": true,
            "deprecationMessage": "In favor of the \"loop\" event. Will be removed in a future version.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 776,
            "description": "A helper method that dispatches all events for SoundInstance.",
            "itemtype": "method",
            "name": "sendEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 791,
            "description": "Initialize the SoundInstance. This is called from the constructor.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the audio.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The plugin that created this instance.",
                    "type": "Class"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 817,
            "description": "Clean up the instance. Remove references and clean up any additional properties such as timers.",
            "itemtype": "method",
            "name": "cleanup",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 845,
            "description": "Turn off and disconnect an audioNode, then set reference to null to release it for garbage collection",
            "params": [
                {
                    "name": "audioNode",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "AudioNode"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 859,
            "description": "The sound has been interrupted.",
            "itemtype": "method",
            "name": "interrupt",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 912,
            "description": "Creates an audio node using the current src and context, connects it to the gain node, and starts playback.",
            "itemtype": "method",
            "name": "createAudioNode",
            "params": [
                {
                    "name": "startTime",
                    "description": "The time to add this to the web audio context, in seconds.",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The amount of time into the src audio to start playback, in seconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioNode"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 935,
            "description": "Play an instance. This method is intended to be called on SoundInstances that already exist (created\nwith the Sound API {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} or {{#crossLink \"Sound/play\"}}{{/crossLink}}).\n\n<h4>Example</h4>\n\n     var myInstance = createJS.Sound.createInstance(mySrc);\n     myInstance.play(createJS.Sound.INTERRUPT_ANY);",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "interrupt",
                    "description": "How this sound interrupts other instances with the same source. Interrupt values\nare defined as constants on {{#crossLink \"Sound\"}}{{/crossLink}}. The default value is <code>Sound.INTERRUPT_NONE</code>.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "none"
                },
                {
                    "name": "delay",
                    "description": "The delay in milliseconds before the sound starts",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "offset",
                    "description": "How far into the sound to begin playback, in milliseconds.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "loop",
                    "description": "The number of times to loop the audio. Use -1 for infinite loops.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "volume",
                    "description": "The volume of the sound, between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "pan",
                    "description": "The pan of the sound between -1 (left) and 1 (right). Note that pan is not supported\nfor HTML Audio.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 959,
            "description": "Called by the Sound class when the audio is ready to play (delay has completed). Starts sound playing if the\nsrc is loaded, otherwise playback will fail.",
            "itemtype": "method",
            "name": "beginPlaying",
            "params": [
                {
                    "name": "offset",
                    "description": "How far into the sound to begin playback, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "The number of times to loop the audio. Use -1 for infinite loops.",
                    "type": "Number"
                },
                {
                    "name": "volume",
                    "description": "The volume of the sound, between 0 and 1.",
                    "type": "Number"
                },
                {
                    "name": "pan",
                    "description": "The pan of the sound between -1 (left) and 1 (right). Note that pan does not work for HTML Audio.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 994,
            "description": "Pause the instance. Paused audio will stop at the current time, and can be resumed using\n{{#crossLink \"SoundInstance/resume\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n     myInstance.pause();",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "If the pause call succeeds. This will return false if the sound isn't currently playing.",
                "type": "Boolean"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1024,
            "description": "Resume an instance that has been paused using {{#crossLink \"SoundInstance/pause\"}}{{/crossLink}}. Audio that\nhas not been paused will not playback when this method is called.\n\n<h4>Example</h4>\n\n    myInstance.pause();\n    // do some stuff\n    myInstance.resume();",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "If the resume call succeeds. This will return false if called on a sound that is not paused.",
                "type": "Boolean"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1045,
            "description": "Stop playback of the instance. Stopped sounds will reset their position to 0, and calls to {{#crossLink \"SoundInstance/resume\"}}{{/crossLink}}\nwill fail.  To start playback again, call {{#crossLink \"SoundInstance/play\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n    myInstance.stop();",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "If the stop call succeeds.",
                "type": "Boolean"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1063,
            "description": "Set the volume of the instance. You can retrieve the volume using {{#crossLink \"SoundInstance/getVolume\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n     myInstance.setVolume(0.5);\n\nNote that the master volume set using the Sound API method {{#crossLink \"Sound/setVolume\"}}{{/crossLink}}\nwill be applied to the instance volume.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "The volume to set, between 0 and 1."
                }
            ],
            "return": {
                "description": "If the setVolume call succeeds.",
                "type": "Boolean"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1087,
            "description": "Internal function used to update the volume based on the instance volume, master volume, instance mute value,\nand master mute value.",
            "itemtype": "method",
            "name": "updateVolume",
            "return": {
                "description": "if the volume was updated.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1103,
            "description": "Get the volume of the instance. The actual output volume of a sound can be calculated using:\n<code>myInstance.getVolume() * createjs.Sound.getVolume();</code>",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The current volume of the sound instance."
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1114,
            "description": "Mute and unmute the sound. <strong>Please use {{#crossLink \"SoundInstance/setMute\"}}{{/crossLink}} instead</strong>.",
            "itemtype": "method",
            "name": "mute",
            "params": [
                {
                    "name": "value",
                    "description": "If the sound should be muted or not.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute call succeeds.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "This method has been replaced by setMute.",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1127,
            "description": "Mute and unmute the sound. Muted sounds will still play at 0 volume. Note that an unmuted sound may still be\nsilent depending on {{#crossLink \"Sound\"}}{{/crossLink}} volume, instance volume, and Sound mute.\n\n<h4>Example</h4>\n\n    myInstance.setMute(true);",
            "itemtype": "method",
            "name": "setMute",
            "params": [
                {
                    "name": "value",
                    "description": "If the sound should be muted.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute call succeeds.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1150,
            "description": "Get the mute value of the instance.\n\n<h4>Example</h4>\n\n     var isMuted = myInstance.getMute();",
            "itemtype": "method",
            "name": "getMute",
            "return": {
                "description": "If the sound is muted.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1165,
            "description": "Set the left(-1)/right(+1) pan of the instance. Note that {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}} does not\nsupport panning, and only simple left/right panning has been implemented for {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\nThe default pan value is 0 (center).\n\n<h4>Example</h4>\n\n    myInstance.setPan(-1);  // to the left!",
            "itemtype": "method",
            "name": "setPan",
            "params": [
                {
                    "name": "value",
                    "description": "The pan value, between -1 (left) and 1 (right).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the setPan call succeeds.",
                "type": "Number"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1189,
            "description": "Get the left/right pan of the instance. Note in WebAudioPlugin this only gives us the \"x\" value of what is\nactually 3D audio.\n\n<h4>Example</h4>\n\n    var myPan = myInstance.getPan();",
            "itemtype": "method",
            "name": "getPan",
            "return": {
                "description": "The value of the pan, between -1 (left) and 1 (right).",
                "type": "Number"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1204,
            "description": "Get the position of the playhead in the instance in milliseconds.\n\n<h4>Example</h4>\n\n    var currentOffset = myInstance.getPosition();",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "The position of the playhead in the sound, in milliseconds.",
                "type": "Number"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1224,
            "description": "Set the position of the playhead in the instance. This can be set while a sound is playing, paused, or even\nstopped.\n\n<h4>Example</h4>\n\n     myInstance.setPosition(myInstance.getDuration()/2); // set audio to its halfway point.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "value",
                    "description": "The position to place the playhead, in milliseconds.",
                    "type": "Number"
                }
            ],
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1252,
            "description": "Get the duration of the instance, in milliseconds. Note in most cases, you need to play a sound using\n{{#crossLink \"SoundInstance/play\"}}{{/crossLink}} or the Sound API {{#crossLink \"Sound.play\"}}{{/crossLink}}\nmethod before its duration can be reported accurately.\n\n<h4>Example</h4>\n\n    var soundDur = myInstance.getDuration();",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "The duration of the sound instance in milliseconds.",
                "type": "Number"
            },
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1332,
            "description": "An internal helper class that preloads web audio via XHR. Note that this class and its methods are not documented\nproperly to avoid generating HTML documentation.\n#class WebAudioLoader",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the sound to load.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "A reference to the class that created this instance.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1352,
            "description": "The source of the sound to load. Used by callback functions when we return this class.\n#property src",
            "type": "{String}",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1359,
            "description": "The decoded AudioBuffer array that is returned when loading is complete.\n#property result",
            "type": "{AudioBuffer}",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1368,
            "description": "The callback that fires when the load completes. This follows HTML tag naming.\n#property onload",
            "type": "{Method}",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1375,
            "description": "The callback that fires as the load progresses. This follows HTML tag naming.\n#property onprogress",
            "type": "{Method}",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1382,
            "description": "The callback that fires if the load hits an error.\n#property onError",
            "type": "{Method}",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1396,
            "description": "Begin loading the content.\n#method load",
            "params": [
                {
                    "name": "src",
                    "description": "The path to the sound.",
                    "type": "String"
                }
            ],
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1416,
            "description": "The loader has reported progress.\n#method handleProgress",
            "params": [
                {
                    "name": "loaded",
                    "description": "The loaded amount.",
                    "type": "Number"
                },
                {
                    "name": "total",
                    "description": "The total amount.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1431,
            "description": "The sound has completed loading.\n#method handleLoad",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1442,
            "description": "The audio has been decoded.\n#method handleAudioDecoded",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\WebAudioPlugin.js",
            "line": 1454,
            "description": "Errors have been caused by the loader.\n#method handleError",
            "access": "protected",
            "tagname": "",
            "class": "SoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\version.js",
            "line": 16,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "SoundJS",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\version.js",
            "line": 24,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "SoundJS",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\version_flashplugin.js",
            "line": 6,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "FlashPlugin",
            "module": "SoundJS"
        },
        {
            "file": "..\\src\\soundjs\\version_flashplugin.js",
            "line": 15,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "FlashPlugin",
            "module": "SoundJS"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\soundjs\\Sound.js:597"
        },
        {
            "message": "Missing item type\nCalled from Flash.  Lets us know flash has finished playing a sound.\n#method handleSoundFinished",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:839"
        },
        {
            "message": "Missing item type\nCalled from Flash.  Lets us know that flash has played a sound to completion and is looping it.\n#method handleSoundLoop",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:853"
        },
        {
            "message": "Missing item type\nSoundLoader provides a mechanism to preload Flash content via PreloadJS or internally. Instances are returned to\nthe preloader, and the load method is called when the asset needs to be requested.\n\nSoundLoader has the same APIs as an &lt;audio&gt; tag. The instance calls the <code>onload</code>, <code>onprogress</code>,\nand <code>onerror</code> callbacks when necessary.\n\n#class SoundLoader",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:877"
        },
        {
            "message": "Missing item type\nA reference to the Flash instance that gets created.\n#property flash",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:895"
        },
        {
            "message": "Missing item type\nThe source file to be loaded.\n#property src",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:902"
        },
        {
            "message": "Missing item type\nID used to facilitate communication with flash.\n#property flashId",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:909"
        },
        {
            "message": "Missing item type\nThe percentage of progress.\n#property progress",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:916"
        },
        {
            "message": "Missing item type\nUsed to report if audio is ready.  Value of 4 indicates ready.\n#property readyState",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:924"
        },
        {
            "message": "Missing item type\nIndicates if <code>load</code> has been called on this.\n#property loading",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:932"
        },
        {
            "message": "Missing item type\nPlugin that created this.  This will be an instance of <code>FlashPlugin</code>.\n#property owner",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:940"
        },
        {
            "message": "Missing item type\nThe callback that fires when the load completes. This follows HTML tag name conventions.\n#property onload",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:948"
        },
        {
            "message": "Missing item type\nThe callback that fires as the load progresses. This follows HTML tag name conventions.\n#property onprogress",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:955"
        },
        {
            "message": "Missing item type\nThe callback that fires if the load hits an error. This follows HTML tag name conventions.\n#property onerror",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:962"
        },
        {
            "message": "Missing item type\nCalled when Flash has been initialized. If a load call was made before this, call it now.\n#method initialize",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:976"
        },
        {
            "message": "Missing item type\nStart loading.\n#method load",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:989"
        },
        {
            "message": "Missing item type\nReceive progress from Flash and pass it to callback.\n#method handleProgress",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:1012"
        },
        {
            "message": "Missing item type\nCalled from Flash when sound is loaded.  Set our ready state and fire callbacks / events\n#method handleComplete",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:1023"
        },
        {
            "message": "Missing item type\nReceive error event from flash and pass it to callback.",
            "line": " ..\\src\\soundjs\\FlashPlugin.js:1034"
        },
        {
            "message": "Missing item type\nAn internal helper class that preloads html audio via HTMLAudioElement tags. Note that PreloadJS will NOT use\nthis load class like it does Flash and WebAudio plugins.\nNote that this class and its methods are not documented properly to avoid generating HTML documentation.\n#class HTMLAudioLoader",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:717"
        },
        {
            "message": "Missing item type\nThe source to be loaded.\n#property src",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:734"
        },
        {
            "message": "Missing item type\nThe tag to load the source with / into.\n#property tag",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:743"
        },
        {
            "message": "Missing item type\nAn interval used to give us progress.\n#property preloadTimer",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:752"
        },
        {
            "message": "Missing item type\nAllows us to have preloading progress and tell when its done.\n#method preloadTick",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:785"
        },
        {
            "message": "Missing item type\nInternal handler for when a tag is loaded.\n#method handleTagLoaded",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:801"
        },
        {
            "message": "Missing item type\nCommunicates back to Sound that a load is complete.\n#method sendLoadedEvent",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:810"
        },
        {
            "message": "Missing item type\nThe TagPool is an object pool for HTMLAudio tag instances. In Chrome, we have to pre-create the number of HTML\naudio tag instances that we are going to play before we load the data, otherwise the audio stalls.\n(Note: This seems to be a bug in Chrome)\n#class TagPool",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:830"
        },
        {
            "message": "Missing item type\nA hash lookup of each sound channel, indexed by the audio source.\n#property tags",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:842"
        },
        {
            "message": "Missing item type\nGet a tag pool. If the pool doesn't exist, create it.\n#method get",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:850"
        },
        {
            "message": "Missing item type\nDelete a TagPool and all related tags. Note that if the TagPool does not exist, this will fail.\n#method remove",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:865"
        },
        {
            "message": "Missing item type\nDelete all TagPools and all related tags.\n#method removeAll",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:882"
        },
        {
            "message": "Missing item type\nGet a tag instance. This is a shortcut method.\n#method getInstance",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:894"
        },
        {
            "message": "Missing item type\nReturn a tag instance. This is a shortcut method.\n#method setInstance",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:909"
        },
        {
            "message": "Missing item type\nThe source of the tag pool.\n#property src",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:927"
        },
        {
            "message": "Missing item type\nThe total number of HTMLAudio tags in this pool. This is the maximum number of instance of a certain sound\nthat can play at one time.\n#property length",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:935"
        },
        {
            "message": "Missing item type\nThe number of unused HTMLAudio tags.\n#property available",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:945"
        },
        {
            "message": "Missing item type\nA list of all available tags in the pool.\n#property tags",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:954"
        },
        {
            "message": "Missing item type\nAdd an HTMLAudio tag into the pool.\n#method add",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:968"
        },
        {
            "message": "Missing item type\nRemove all tags from the channel.  Usually in response to a delete call.\n#method removeAll",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:979"
        },
        {
            "message": "Missing item type\nGet an HTMLAudioElement for immediate playback. This takes it out of the pool.\n#method get",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:992"
        },
        {
            "message": "Missing item type\nPut an HTMLAudioElement back in the pool for use.\n#method set",
            "line": " ..\\src\\soundjs\\HTMLAudioPlugin.js:1009"
        },
        {
            "message": "Missing item type\nA function proxy for Sound methods. By default, JavaScript methods do not maintain scope, so passing a\nmethod as a callback will result in the method getting called in the scope of the caller. Using a proxy\nensures that the method gets called in the correct scope.\nNote arguments can be passed that will be applied to the function when it is called.\n\n<h4>Example<h4>\n    myObject.myCallback = createjs.proxy(myHandler, this, arg1, arg2);\n\n#method proxy",
            "line": " ..\\src\\soundjs\\Sound.js:1356"
        },
        {
            "message": "Missing item type\nAn internal class that manages the number of active {{#crossLink \"SoundInstance\"}}{{/crossLink}} instances for\neach sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n\nThe number of sounds is artificially limited by Sound in order to prevent over-saturation of a\nsingle sound, as well as to stay within hardware limitations, although the latter may disappear with better\nbrowser support.\n\nWhen a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\nsound that is already playing.\n#class SoundChannel",
            "line": " ..\\src\\soundjs\\Sound.js:1380"
        },
        {
            "message": "Missing item type\nA hash of channel instances indexed by source.\n#property channels",
            "line": " ..\\src\\soundjs\\Sound.js:1403"
        },
        {
            "message": "Missing item type\nCreate a sound channel. Note that if the sound channel already exists, this will fail.\n#method create",
            "line": " ..\\src\\soundjs\\Sound.js:1411"
        },
        {
            "message": "Missing item type\nDelete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n#method remove",
            "line": " ..\\src\\soundjs\\Sound.js:1427"
        },
        {
            "message": "Missing item type\nDelete all sound channels, stop and delete all related instances.\n#method removeAll",
            "line": " ..\\src\\soundjs\\Sound.js:1443"
        },
        {
            "message": "Missing item type\nAdd an instance to a sound channel.\n#method add",
            "line": " ..\\src\\soundjs\\Sound.js:1454"
        },
        {
            "message": "Missing item type\nRemove an instance from the channel.\n#method remove",
            "line": " ..\\src\\soundjs\\Sound.js:1470"
        },
        {
            "message": "Missing item type\nGet the maximum number of sounds you can have in a channel.\n#method maxPerChannel",
            "line": " ..\\src\\soundjs\\Sound.js:1485"
        },
        {
            "message": "Missing item type\nGet a channel instance by its src.\n#method get",
            "line": " ..\\src\\soundjs\\Sound.js:1493"
        },
        {
            "message": "Missing item type\nThe source of the channel.\n#property src",
            "line": " ..\\src\\soundjs\\Sound.js:1505"
        },
        {
            "message": "Missing item type\nThe maximum number of instances in this channel.  -1 indicates no limit\n#property max",
            "line": " ..\\src\\soundjs\\Sound.js:1512"
        },
        {
            "message": "Missing item type\nThe default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n#property maxDefault",
            "line": " ..\\src\\soundjs\\Sound.js:1519"
        },
        {
            "message": "Missing item type\nThe current number of active instances.\n#property length",
            "line": " ..\\src\\soundjs\\Sound.js:1528"
        },
        {
            "message": "Missing item type\nInitialize the channel.\n#method init",
            "line": " ..\\src\\soundjs\\Sound.js:1535"
        },
        {
            "message": "Missing item type\nGet an instance by index.\n#method get",
            "line": " ..\\src\\soundjs\\Sound.js:1551"
        },
        {
            "message": "Missing item type\nAdd a new instance to the channel.\n#method add",
            "line": " ..\\src\\soundjs\\Sound.js:1561"
        },
        {
            "message": "Missing item type\nRemove an instance from the channel, either when it has finished playing, or it has been interrupted.\n#method remove",
            "line": " ..\\src\\soundjs\\Sound.js:1576"
        },
        {
            "message": "Missing item type\nStop playback and remove all instances from the channel.  Usually in response to a delete call.\n#method removeAll",
            "line": " ..\\src\\soundjs\\Sound.js:1593"
        },
        {
            "message": "Missing item type\nGet an available slot depending on interrupt value and if slots are available.\n#method getSlot",
            "line": " ..\\src\\soundjs\\Sound.js:1604"
        },
        {
            "message": "Missing item type\nAn additional module to determine the current browser, version, operating system, and other environment\nvariables. It is not publically documented.\n#class BrowserDetect",
            "line": " ..\\src\\soundjs\\Sound.js:1680"
        },
        {
            "message": "Missing item type\nTurn off and disconnect an audioNode, then set reference to null to release it for garbage collection",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:845"
        },
        {
            "message": "Missing item type\nAn internal helper class that preloads web audio via XHR. Note that this class and its methods are not documented\nproperly to avoid generating HTML documentation.\n#class WebAudioLoader",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1332"
        },
        {
            "message": "Missing item type\nThe source of the sound to load. Used by callback functions when we return this class.\n#property src",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1352"
        },
        {
            "message": "Missing item type\nThe decoded AudioBuffer array that is returned when loading is complete.\n#property result",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1359"
        },
        {
            "message": "Missing item type\nThe callback that fires when the load completes. This follows HTML tag naming.\n#property onload",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1368"
        },
        {
            "message": "Missing item type\nThe callback that fires as the load progresses. This follows HTML tag naming.\n#property onprogress",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1375"
        },
        {
            "message": "Missing item type\nThe callback that fires if the load hits an error.\n#property onError",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1382"
        },
        {
            "message": "Missing item type\nBegin loading the content.\n#method load",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1396"
        },
        {
            "message": "Missing item type\nThe loader has reported progress.\n#method handleProgress",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1416"
        },
        {
            "message": "Missing item type\nThe sound has completed loading.\n#method handleLoad",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1431"
        },
        {
            "message": "Missing item type\nThe audio has been decoded.\n#method handleAudioDecoded",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1442"
        },
        {
            "message": "Missing item type\nErrors have been caused by the loader.\n#method handleError",
            "line": " ..\\src\\soundjs\\WebAudioPlugin.js:1454"
        }
    ]
}
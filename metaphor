You have a robotics team.

You have a single core thread running the team. Let's call him "Ray".

"Ray" works on tasks linearly, that is, he can only execute one thing at a time.

Also, he is the thread who receives all outside requests. Entities like "Mr. Eno" and "Mr. Wofford" can both send him requests at any time.

However, if "Ray" spends time working on tasks given to him by "Mr. Eno", and "Mr. Wofford" asks him to do something, "Ray" cannot switch tasks. So "Mr. Wofford" has to wait... and the team grinds to a halt.

So instead, "Ray" has an idea. Since he is the supreme commander of the robotics team, he can delegate tasks. Namely, he calls his lackeys "Max" and "Eric". He tells "Max" to respond to all "Tighten Screws" tasks with a set of instructions. (He does the same with a number of other lowerclassmen in the team, until each event has a handler.)

"Max", then, has an infinite number of "Ben" clones. Every time "Max" receives a request that he has to respond to, he copies the instructions, creates a "Ben" clone, and gives him a copy of the instructions.

Since "Max" can create an infinite number of "Ben" clones (which recycle themselves after task completion), the server can respond to an indeterminate number of requests.

Aside--HTTP server
===========================

"Ray" tells "Max" to handle the event "add arm", which occurs when either "Mr. Wofford" or "Mr. Eno" tell the team to add an arm to the robot.

"Mr. Wofford" likes arms with 6 degrees of freedom, while Eno likes telescoping arms.

But of course, both clients are free to choose any combination of "N" degrees of freedom and "isTelscoping", a boolean representing whether an arm is telescoping.

As a result, "Ray" writes the instructions that he passes to "Max" with two arguments, "N" and "isTelescoping".

"Ray"'s instructions are as follows:

public Arm makeArm(int N, boolean isTelescoping){
. for (int i = 0; i < N; i++){
.   getMaterials("joint");
.   addJointToArm();
.   if (isTelescoping){
.     makeTelescope(joints[i]);
.   }
. }
}

So if "Mr. Eno" tells the team to make a nontelescoping arm that has 100 degrees of freedom, "Max" will create a "Ben" clone and tell him to call makeArm(100,false).

============================

Summary:
Your core thread (Ray) creates event-Handling objects (Max), which start child threads (Ben) to handle events that are triggered by clients (Wofford and Eno).
